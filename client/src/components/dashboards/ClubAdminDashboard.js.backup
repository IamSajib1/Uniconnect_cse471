// Re-export the refactored ClubAdminDashboard component
import ClubAdminDashboard from './ClubAdmin/ClubAdminDashboard';

export default ClubAdminDashboard;
    const { user } = useAuth();
    const [loading, setLoading] = useState(true);
    const [tabValue, setTabValue] = useState(0);

    // Data States
    const [myClubs, setMyClubs] = useState([]);
    const [myEvents, setMyEvents] = useState([]);
    const [universities, setUniversities] = useState([]);

    // Dialog States
    const [clubFormOpen, setClubFormOpen] = useState(false);
    const [eventFormOpen, setEventFormOpen] = useState(false);
    const [memberManagementOpen, setMemberManagementOpen] = useState(false);
    const [attendeeManagementOpen, setAttendeeManagementOpen] = useState(false);
    const [selectedClub, setSelectedClub] = useState(null);
    const [selectedEvent, setSelectedEvent] = useState(null);
    const [editMode, setEditMode] = useState(false);

    // Form States
    const [clubFormData, setClubFormData] = useState({
        name: '',
        description: '',
        category: '',
        contactEmail: '',
        membershipFee: 0,
        advisors: [''],
        socialMedia: {
            facebook: '',
            instagram: '',
            twitter: '',
            linkedin: '',
            website: ''
        },
        meetingSchedule: {
            day: '',
            time: '',
            location: ''
        }
    });

    const [eventFormData, setEventFormData] = useState({
        title: '',
        description: '',
        eventType: '',
        startDate: '',
        endDate: '',
        startTime: '',
        endTime: '',
        venue: '',
        maxAttendees: '',
        registrationFee: 0,
        registrationDeadline: '',
        isRegistrationRequired: true,
        isPublic: true,
        tags: [''],
        contactPerson: {
            name: '',
            email: '',
            phone: ''
        }
    });

    const [formErrors, setFormErrors] = useState({});
    const [submitLoading, setSubmitLoading] = useState(false);

    // Member Management States
    const [clubMembers, setClubMembers] = useState([]);
    const [searchEmail, setSearchEmail] = useState('');
    const [searchUser, setSearchUser] = useState(null);
    const [searchLoading, setSearchLoading] = useState(false);

    // Statistics
    const [stats, setStats] = useState({
        totalClubs: 0,
        totalEvents: 0,
        totalMembers: 0,
        upcomingEvents: 0
    });

    // Priority 3 States
    // Advanced Notification System
    const [notificationSettingsOpen, setNotificationSettingsOpen] = useState(false);
    const [notifications, setNotifications] = useState([]);
    const [notificationPreferences, setNotificationPreferences] = useState({
        emailNotifications: true,
        pushNotifications: true,
        memberJoined: true,
        eventCreated: true,
        eventRegistration: true,
        achievements: true
    });

    // Advanced Analytics & Reports
    const [analyticsOpen, setAnalyticsOpen] = useState(false);
    const [analyticsData, setAnalyticsData] = useState({
        memberEngagement: {},
        eventPerformance: {},
        financialData: {},
        monthlyTrends: {}
    });
    const [reportType, setReportType] = useState('engagement');

    // Achievement & Recognition System
    const [achievementSystemOpen, setAchievementSystemOpen] = useState(false);
    const [memberAchievements, setMemberAchievements] = useState([]);
    const [availableBadges, setAvailableBadges] = useState([]);
    const [leaderboard, setLeaderboard] = useState([]);

    // Advanced Event Management
    const [eventTemplatesOpen, setEventTemplatesOpen] = useState(false);
    const [eventTemplates, setEventTemplates] = useState([]);
    const [bulkEventCreationOpen, setBulkEventCreationOpen] = useState(false);
    const [conflictDetection, setConflictDetection] = useState([]);

    // Communication Hub
    const [communicationHubOpen, setCommunicationHubOpen] = useState(false);
    const [messages, setMessages] = useState([]);
    const [selectedConversation, setSelectedConversation] = useState(null);
    const [newMessage, setNewMessage] = useState('');
    const [announcements, setAnnouncements] = useState([]);

    // Advanced Role Management
    const [roleManagementOpen, setRoleManagementOpen] = useState(false);
    const [customRoles, setCustomRoles] = useState([]);
    const [permissions, setPermissions] = useState([]);
    const [roleMatrix, setRoleMatrix] = useState({});

    useEffect(() => {
        fetchData();
        fetchUniversities();
    }, []);

    const fetchData = async () => {
        try {
            setLoading(true);
            const [clubsRes, eventsRes] = await Promise.all([
                axios.get('/api/clubs/managed'),
                axios.get('/api/events/managed')
            ]);

            const clubs = clubsRes.data.clubs || [];
            const events = eventsRes.data.events || [];

            setMyClubs(clubs);
            setMyEvents(events);

            // Calculate stats
            const totalMembers = clubs.reduce((sum, club) => sum + (club.members?.length || 0), 0);
            const upcomingEvents = events.filter(event => new Date(event.startDate) > new Date()).length;

            setStats({
                totalClubs: clubs.length,
                totalEvents: events.length,
                totalMembers,
                upcomingEvents
            });
        } catch (error) {
            console.error('Error fetching data:', error);
        } finally {
            setLoading(false);
        }
    };

    const fetchUniversities = async () => {
        try {
            const response = await axios.get('/api/universities');
            setUniversities(response.data.universities || []);
        } catch (error) {
            console.error('Error fetching universities:', error);
        }
    };

    // Club Operations
    const handleCreateClub = () => {
        setSelectedClub(null);
        setEditMode(false);
        setClubFormData({
            name: '',
            description: '',
            category: '',
            contactEmail: '',
            membershipFee: 0,
            advisors: [''],
            socialMedia: {
                facebook: '',
                instagram: '',
                twitter: '',
                linkedin: '',
                website: ''
            },
            meetingSchedule: {
                day: '',
                time: '',
                location: ''
            }
        });
        setFormErrors({});
        setClubFormOpen(true);
    };

    const handleEditClub = (club) => {
        setSelectedClub(club);
        setEditMode(true);
        setClubFormData({
            name: club.name || '',
            description: club.description || '',
            category: club.category || '',
            contactEmail: club.contactEmail || '',
            membershipFee: club.membershipFee || 0,
            advisors: club.advisors && club.advisors.length > 0 ? club.advisors : [''],
            socialMedia: {
                facebook: club.socialMedia?.facebook || '',
                instagram: club.socialMedia?.instagram || '',
                twitter: club.socialMedia?.twitter || '',
                linkedin: club.socialMedia?.linkedin || '',
                website: club.socialMedia?.website || ''
            },
            meetingSchedule: {
                day: club.meetingSchedule?.day || '',
                time: club.meetingSchedule?.time || '',
                location: club.meetingSchedule?.location || ''
            }
        });
        setFormErrors({});
        setClubFormOpen(true);
    };

    const handleManageMembers = async (club) => {
        setSelectedClub(club);
        setClubMembers(club.members || []);
        setMemberManagementOpen(true);
    };

    // Event Operations
    const handleCreateEvent = () => {
        setSelectedEvent(null);
        setEditMode(false);
        setEventFormData({
            title: '',
            description: '',
            eventType: '',
            startDate: '',
            endDate: '',
            startTime: '',
            endTime: '',
            venue: '',
            maxAttendees: '',
            registrationFee: 0,
            registrationDeadline: '',
            isRegistrationRequired: true,
            isPublic: true,
            tags: [''],
            contactPerson: {
                name: '',
                email: '',
                phone: ''
            },
            club: myClubs.length > 0 ? myClubs[0]._id : ''
        });
        setFormErrors({});
        setEventFormOpen(true);
    };

    const handleEditEvent = (event) => {
        setSelectedEvent(event);
        setEditMode(true);
        setEventFormData({
            title: event.title || '',
            description: event.description || '',
            eventType: event.eventType || '',
            startDate: event.startDate ? new Date(event.startDate).toISOString().split('T')[0] : '',
            endDate: event.endDate ? new Date(event.endDate).toISOString().split('T')[0] : '',
            startTime: event.startTime || '',
            endTime: event.endTime || '',
            venue: event.venue || '',
            maxAttendees: event.maxAttendees || '',
            registrationFee: event.registrationFee || 0,
            registrationDeadline: event.registrationDeadline ?
                new Date(event.registrationDeadline).toISOString().split('T')[0] : '',
            isRegistrationRequired: event.isRegistrationRequired !== undefined ? event.isRegistrationRequired : true,
            isPublic: event.isPublic !== undefined ? event.isPublic : true,
            tags: event.tags && event.tags.length > 0 ? event.tags : [''],
            contactPerson: {
                name: event.contactPerson?.name || '',
                email: event.contactPerson?.email || '',
                phone: event.contactPerson?.phone || ''
            },
            club: event.club?._id || (myClubs.length > 0 ? myClubs[0]._id : '')
        });
        setFormErrors({});
        setEventFormOpen(true);
    };

    const handleManageAttendees = (event) => {
        setSelectedEvent(event);
        setAttendeeManagementOpen(true);
    };

    const handleClubFormClose = () => {
        setClubFormOpen(false);
        setSelectedClub(null);
        setEditMode(false);
        setFormErrors({});
        fetchData(); // Refresh data
    };

    const handleEventFormClose = () => {
        setEventFormOpen(false);
        setSelectedEvent(null);
        setEditMode(false);
        setFormErrors({});
        fetchData(); // Refresh data
    };

    // Form Validation Functions
    const validateClubForm = () => {
        const errors = {};

        if (!clubFormData.name.trim()) errors.name = 'Club name is required';
        if (!clubFormData.description.trim()) errors.description = 'Description is required';
        if (!clubFormData.category) errors.category = 'Category is required';
        if (!clubFormData.contactEmail.trim()) errors.contactEmail = 'Contact email is required';
        else if (!/\S+@\S+\.\S+/.test(clubFormData.contactEmail)) errors.contactEmail = 'Valid email is required';

        return errors;
    };

    const validateEventForm = () => {
        const errors = {};

        if (!eventFormData.title.trim()) errors.title = 'Event title is required';
        if (!eventFormData.description.trim()) errors.description = 'Description is required';
        if (!eventFormData.eventType) errors.eventType = 'Event type is required';
        if (!eventFormData.startDate) errors.startDate = 'Start date is required';
        if (!eventFormData.startTime) errors.startTime = 'Start time is required';
        if (!eventFormData.venue.trim()) errors.venue = 'Venue is required';
        if (!eventFormData.club) errors.club = 'Please select a club';

        if (eventFormData.startDate && eventFormData.endDate) {
            if (new Date(eventFormData.endDate) < new Date(eventFormData.startDate)) {
                errors.endDate = 'End date must be after start date';
            }
        }

        return errors;
    };

    // Form Submission Functions
    const handleClubFormSubmit = async (e) => {
        e.preventDefault();
        const errors = validateClubForm();

        if (Object.keys(errors).length > 0) {
            setFormErrors(errors);
            return;
        }

        setSubmitLoading(true);
        try {
            const cleanedData = {
                ...clubFormData,
                advisors: clubFormData.advisors.filter(advisor => advisor.trim()),
                membershipFee: parseFloat(clubFormData.membershipFee) || 0
            };

            if (editMode && selectedClub) {
                await axios.put(`/api/clubs/${selectedClub._id}`, cleanedData);
                alert('Club updated successfully!');
            } else {
                await axios.post('/api/clubs', cleanedData);
                alert('Club created successfully!');
            }

            handleClubFormClose();
        } catch (error) {
            console.error('Error submitting club form:', error);
            alert(error.response?.data?.message || 'Error saving club');
        } finally {
            setSubmitLoading(false);
        }
    };

    const handleEventFormSubmit = async (e) => {
        e.preventDefault();
        const errors = validateEventForm();

        if (Object.keys(errors).length > 0) {
            setFormErrors(errors);
            return;
        }

        setSubmitLoading(true);
        try {
            const cleanedData = {
                ...eventFormData,
                tags: eventFormData.tags.filter(tag => tag.trim()),
                maxAttendees: eventFormData.maxAttendees ? parseInt(eventFormData.maxAttendees) : null,
                registrationFee: parseFloat(eventFormData.registrationFee) || 0,
                organizer: eventFormData.club
            };

            // Remove empty contact person fields
            if (!cleanedData.contactPerson.name && !cleanedData.contactPerson.email && !cleanedData.contactPerson.phone) {
                delete cleanedData.contactPerson;
            }

            if (editMode && selectedEvent) {
                await axios.put(`/api/events/${selectedEvent._id}`, cleanedData);
                alert('Event updated successfully!');
            } else {
                await axios.post('/api/events', cleanedData);
                alert('Event created successfully!');
            }

            handleEventFormClose();
        } catch (error) {
            console.error('Error submitting event form:', error);
            alert(error.response?.data?.message || 'Error saving event');
        } finally {
            setSubmitLoading(false);
        }
    };

    // Member Management Functions
    const handleSearchUser = async () => {
        if (!searchEmail.trim()) return;

        setSearchLoading(true);
        try {
            const response = await axios.get(`/api/users/search?email=${searchEmail}`);
            setSearchUser(response.data.user);
        } catch (error) {
            console.error('Error searching user:', error);
            alert(error.response?.data?.message || 'User not found');
            setSearchUser(null);
        } finally {
            setSearchLoading(false);
        }
    };

    const handleAddMember = async (role = 'Member') => {
        if (!searchUser || !selectedClub) return;

        try {
            await axios.post(`/api/clubs/${selectedClub._id}/members`, {
                userId: searchUser._id,
                role: role
            });

            // Refresh club members
            const response = await axios.get(`/api/clubs/${selectedClub._id}`);
            setClubMembers(response.data.members || []);
            setSearchEmail('');
            setSearchUser(null);
            fetchData(); // Refresh main data
            alert('Member added successfully!');
        } catch (error) {
            console.error('Error adding member:', error);
            alert(error.response?.data?.message || 'Error adding member');
        }
    };

    const handleRemoveMember = async (userId) => {
        if (!selectedClub) return;

        if (window.confirm('Are you sure you want to remove this member?')) {
            try {
                await axios.delete(`/api/clubs/${selectedClub._id}/members/${userId}`);

                // Refresh club members
                const response = await axios.get(`/api/clubs/${selectedClub._id}`);
                setClubMembers(response.data.members || []);
                fetchData(); // Refresh main data
                alert('Member removed successfully!');
            } catch (error) {
                console.error('Error removing member:', error);
                alert(error.response?.data?.message || 'Error removing member');
            }
        }
    };

    const handleUpdateMemberRole = async (userId, newRole) => {
        if (!selectedClub) return;

        try {
            await axios.put(`/api/clubs/${selectedClub._id}/members/${userId}/role`, {
                role: newRole
            });

            // Refresh club members
            const response = await axios.get(`/api/clubs/${selectedClub._id}`);
            setClubMembers(response.data.members || []);
            fetchData(); // Refresh main data
            alert('Member role updated successfully!');
        } catch (error) {
            console.error('Error updating member role:', error);
            alert(error.response?.data?.message || 'Error updating role');
        }
    };

    // Form Change Handlers
    const handleClubFormChange = (field, value) => {
        setClubFormData(prev => ({
            ...prev,
            [field]: value
        }));

        // Clear error for this field
        if (formErrors[field]) {
            setFormErrors(prev => ({
                ...prev,
                [field]: null
            }));
        }
    };

    const handleClubNestedFormChange = (parent, field, value) => {
        setClubFormData(prev => ({
            ...prev,
            [parent]: {
                ...prev[parent],
                [field]: value
            }
        }));
    };

    const handleClubArrayChange = (field, index, value) => {
        setClubFormData(prev => ({
            ...prev,
            [field]: prev[field].map((item, i) => i === index ? value : item)
        }));
    };

    const addArrayItem = (field) => {
        setClubFormData(prev => ({
            ...prev,
            [field]: [...prev[field], '']
        }));
    };

    const removeArrayItem = (field, index) => {
        if (clubFormData[field].length > 1) {
            setClubFormData(prev => ({
                ...prev,
                [field]: prev[field].filter((_, i) => i !== index)
            }));
        }
    };

    const handleEventFormChange = (field, value) => {
        setEventFormData(prev => ({
            ...prev,
            [field]: value
        }));

        // Clear error for this field
        if (formErrors[field]) {
            setFormErrors(prev => ({
                ...prev,
                [field]: null
            }));
        }
    };

    const handleEventNestedFormChange = (parent, field, value) => {
        setEventFormData(prev => ({
            ...prev,
            [parent]: {
                ...prev[parent],
                [field]: value
            }
        }));
    };

    const handleEventArrayChange = (field, index, value) => {
        setEventFormData(prev => ({
            ...prev,
            [field]: prev[field].map((item, i) => i === index ? value : item)
        }));
    };

    const addEventArrayItem = (field) => {
        setEventFormData(prev => ({
            ...prev,
            [field]: [...prev[field], '']
        }));
    };

    const removeEventArrayItem = (field, index) => {
        if (eventFormData[field].length > 1) {
            setEventFormData(prev => ({
                ...prev,
                [field]: prev[field].filter((_, i) => i !== index)
            }));
        }
    };

    if (loading) {
        return (
            <Container maxWidth="lg" sx={{ py: 4, display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '60vh' }}>
                <CircularProgress size={60} />
                <Typography variant="h4" sx={{ ml: 2 }}>
                    Loading Club Admin Dashboard...
                </Typography>
            </Container>
        );
    }

    return (
        <Container maxWidth="xl" sx={{ py: 4 }}>
            {/* Header */}
            <Paper sx={{ p: 4, mb: 4, background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)', color: 'white' }}>
                <Box display="flex" justifyContent="space-between" alignItems="center">
                    <Box>
                        <Typography variant="h3" fontWeight="bold" gutterBottom>
                            Club Admin Dashboard 🏆
                        </Typography>
                        <Typography variant="h6" sx={{ opacity: 0.9 }}>
                            Welcome, {user?.name} - Manage your clubs and events
                        </Typography>
                    </Box>
                    <Box>
                        <Button
                            variant="contained"
                            startIcon={<AddIcon />}
                            sx={{ mr: 2, bgcolor: 'rgba(255,255,255,0.2)', '&:hover': { bgcolor: 'rgba(255,255,255,0.3)' } }}
                            onClick={handleCreateClub}
                        >
                            New Club
                        </Button>
                        <Button
                            variant="contained"
                            startIcon={<AddIcon />}
                            sx={{ bgcolor: 'rgba(255,255,255,0.2)', '&:hover': { bgcolor: 'rgba(255,255,255,0.3)' } }}
                            onClick={handleCreateEvent}
                        >
                            New Event
                        </Button>
                    </Box>
                </Box>
            </Paper>

            {/* Stats Cards */}
            <Grid container spacing={3} sx={{ mb: 4 }}>
                <Grid item xs={12} sm={6} md={3}>
                    <Card>
                        <CardContent>
                            <Box display="flex" alignItems="center">
                                <Avatar sx={{ bgcolor: 'primary.main', mr: 2 }}>
                                    <GroupsIcon />
                                </Avatar>
                                <Box>
                                    <Typography color="textSecondary" gutterBottom>
                                        My Clubs
                                    </Typography>
                                    <Typography variant="h4">
                                        {stats.totalClubs}
                                    </Typography>
                                </Box>
                            </Box>
                        </CardContent>
                    </Card>
                </Grid>
                <Grid item xs={12} sm={6} md={3}>
                    <Card>
                        <CardContent>
                            <Box display="flex" alignItems="center">
                                <Avatar sx={{ bgcolor: 'secondary.main', mr: 2 }}>
                                    <EventIcon />
                                </Avatar>
                                <Box>
                                    <Typography color="textSecondary" gutterBottom>
                                        My Events
                                    </Typography>
                                    <Typography variant="h4">
                                        {stats.totalEvents}
                                    </Typography>
                                </Box>
                            </Box>
                        </CardContent>
                    </Card>
                </Grid>
                <Grid item xs={12} sm={6} md={3}>
                    <Card>
                        <CardContent>
                            <Box display="flex" alignItems="center">
                                <Avatar sx={{ bgcolor: 'success.main', mr: 2 }}>
                                    <PersonIcon />
                                </Avatar>
                                <Box>
                                    <Typography color="textSecondary" gutterBottom>
                                        Total Members
                                    </Typography>
                                    <Typography variant="h4">
                                        {stats.totalMembers}
                                    </Typography>
                                </Box>
                            </Box>
                        </CardContent>
                    </Card>
                </Grid>
                <Grid item xs={12} sm={6} md={3}>
                    <Card>
                        <CardContent>
                            <Box display="flex" alignItems="center">
                                <Avatar sx={{ bgcolor: 'warning.main', mr: 2 }}>
                                    <ScheduleIcon />
                                </Avatar>
                                <Box>
                                    <Typography color="textSecondary" gutterBottom>
                                        Upcoming Events
                                    </Typography>
                                    <Typography variant="h4">
                                        {stats.upcomingEvents}
                                    </Typography>
                                </Box>
                            </Box>
                        </CardContent>
                    </Card>
                </Grid>
            </Grid>

            {/* Main Content Tabs */}
            <Card>
                <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
                    <Tabs
                        value={tabValue}
                        onChange={(e, newValue) => setTabValue(newValue)}
                        variant="scrollable"
                        scrollButtons="auto"
                    >
                        <Tab label="My Clubs" />
                        <Tab label="My Events" />
                        <Tab label="Analytics" />
                        <Tab
                            label="Notifications"
                            icon={<NotificationsIcon />}
                            iconPosition="start"
                        />
                        <Tab
                            label="Advanced Reports"
                            icon={<AnalyticsIcon />}
                            iconPosition="start"
                        />
                        <Tab
                            label="Achievements"
                            icon={<EmojiEventsIcon />}
                            iconPosition="start"
                        />
                        <Tab
                            label="Event Templates"
                            icon={<TemplateIcon />}
                            iconPosition="start"
                        />
                        <Tab
                            label="Communication"
                            icon={<MessageIcon />}
                            iconPosition="start"
                        />
                        <Tab
                            label="Role Management"
                            icon={<SecurityIcon />}
                            iconPosition="start"
                        />
                    </Tabs>
                </Box>

                {/* Clubs Tab */}
                {tabValue === 0 && (
                    <CardContent>
                        <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
                            <Typography variant="h5">
                                My Clubs ({myClubs.length})
                            </Typography>
                            <Button
                                variant="contained"
                                startIcon={<AddIcon />}
                                onClick={handleCreateClub}
                            >
                                Create New Club
                            </Button>
                        </Box>

                        {myClubs.length === 0 ? (
                            <Box textAlign="center" py={4}>
                                <GroupsIcon sx={{ fontSize: 64, color: 'text.secondary', mb: 2 }} />
                                <Typography variant="h6" color="text.secondary" gutterBottom>
                                    No clubs yet
                                </Typography>
                                <Typography color="text.secondary" gutterBottom>
                                    Create your first club to start managing members and events
                                </Typography>
                                <Button variant="contained" onClick={handleCreateClub}>
                                    Create Club
                                </Button>
                            </Box>
                        ) : (
                            <Grid container spacing={3}>
                                {myClubs.map((club) => (
                                    <Grid item xs={12} md={6} key={club._id}>
                                        <Card variant="outlined">
                                            <CardContent>
                                                <Box display="flex" alignItems="center" mb={2}>
                                                    <Avatar sx={{ bgcolor: 'primary.main', mr: 2 }}>
                                                        {club.name.charAt(0)}
                                                    </Avatar>
                                                    <Box flexGrow={1}>
                                                        <Typography variant="h6">
                                                            {club.name}
                                                        </Typography>
                                                        <Typography variant="body2" color="text.secondary">
                                                            {club.category}
                                                        </Typography>
                                                    </Box>
                                                    <Chip
                                                        label={club.isActive ? 'Active' : 'Inactive'}
                                                        color={club.isActive ? 'success' : 'default'}
                                                        size="small"
                                                    />
                                                </Box>

                                                <Typography variant="body2" paragraph>
                                                    {club.description}
                                                </Typography>

                                                <Box display="flex" justifyContent="space-between" mb={2}>
                                                    <Typography variant="body2" color="text.secondary">
                                                        👥 {club.members?.length || 0} members
                                                    </Typography>
                                                    <Typography variant="body2" color="text.secondary">
                                                        💰 ${club.membershipFee || 0}
                                                    </Typography>
                                                </Box>
                                            </CardContent>
                                            <CardActions>
                                                <Button
                                                    size="small"
                                                    startIcon={<EditIcon />}
                                                    onClick={() => handleEditClub(club)}
                                                >
                                                    Edit
                                                </Button>
                                                <Button
                                                    size="small"
                                                    startIcon={<PersonIcon />}
                                                    onClick={() => handleManageMembers(club)}
                                                >
                                                    Members
                                                </Button>
                                                <Button
                                                    size="small"
                                                    startIcon={<VisibilityIcon />}
                                                    component={Link}
                                                    to={`/clubs/${club._id}`}
                                                >
                                                    View
                                                </Button>
                                            </CardActions>
                                        </Card>
                                    </Grid>
                                ))}
                            </Grid>
                        )}
                    </CardContent>
                )}

                {/* Events Tab */}
                {tabValue === 1 && (
                    <CardContent>
                        <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
                            <Typography variant="h5">
                                My Events ({myEvents.length})
                            </Typography>
                            <Button
                                variant="contained"
                                startIcon={<AddIcon />}
                                onClick={handleCreateEvent}
                                disabled={myClubs.length === 0}
                            >
                                Create New Event
                            </Button>
                        </Box>

                        {myClubs.length === 0 ? (
                            <Box textAlign="center" py={4}>
                                <EventIcon sx={{ fontSize: 64, color: 'text.secondary', mb: 2 }} />
                                <Typography variant="h6" color="text.secondary" gutterBottom>
                                    Create a club first
                                </Typography>
                                <Typography color="text.secondary">
                                    You need to create a club before you can create events
                                </Typography>
                            </Box>
                        ) : myEvents.length === 0 ? (
                            <Box textAlign="center" py={4}>
                                <EventIcon sx={{ fontSize: 64, color: 'text.secondary', mb: 2 }} />
                                <Typography variant="h6" color="text.secondary" gutterBottom>
                                    No events yet
                                </Typography>
                                <Typography color="text.secondary" gutterBottom>
                                    Create your first event for your clubs
                                </Typography>
                                <Button variant="contained" onClick={handleCreateEvent}>
                                    Create Event
                                </Button>
                            </Box>
                        ) : (
                            <Grid container spacing={3}>
                                {myEvents.map((event) => (
                                    <Grid item xs={12} md={6} key={event._id}>
                                        <Card variant="outlined">
                                            <CardContent>
                                                <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
                                                    <Typography variant="h6">
                                                        {event.title}
                                                    </Typography>
                                                    <Chip
                                                        label={new Date(event.startDate) > new Date() ? 'Upcoming' : 'Past'}
                                                        color={new Date(event.startDate) > new Date() ? 'primary' : 'default'}
                                                        size="small"
                                                    />
                                                </Box>

                                                <Typography variant="body2" color="primary" gutterBottom>
                                                    {event.club?.name}
                                                </Typography>

                                                <Typography variant="body2" paragraph>
                                                    {event.description}
                                                </Typography>

                                                <Box display="flex" flexDirection="column" gap={1} mb={2}>
                                                    <Typography variant="body2" color="text.secondary">
                                                        📅 {new Date(event.startDate).toLocaleDateString()}
                                                    </Typography>
                                                    <Typography variant="body2" color="text.secondary">
                                                        🕒 {event.startTime} - {event.endTime}
                                                    </Typography>
                                                    <Typography variant="body2" color="text.secondary">
                                                        📍 {event.venue}
                                                    </Typography>
                                                    <Typography variant="body2" color="text.secondary">
                                                        👥 {event.attendees?.length || 0} attendees
                                                    </Typography>
                                                </Box>
                                            </CardContent>
                                            <CardActions>
                                                <Button
                                                    size="small"
                                                    startIcon={<EditIcon />}
                                                    onClick={() => handleEditEvent(event)}
                                                >
                                                    Edit
                                                </Button>
                                                <Button
                                                    size="small"
                                                    startIcon={<PersonIcon />}
                                                    onClick={() => handleManageAttendees(event)}
                                                >
                                                    Attendees
                                                </Button>
                                                <Button
                                                    size="small"
                                                    startIcon={<VisibilityIcon />}
                                                    component={Link}
                                                    to={`/events/${event._id}`}
                                                >
                                                    View
                                                </Button>
                                            </CardActions>
                                        </Card>
                                    </Grid>
                                ))}
                            </Grid>
                        )}
                    </CardContent>
                )}

                {/* Enhanced Analytics Tab */}
                {tabValue === 2 && (
                    <CardContent>
                        <Typography variant="h5" gutterBottom>
                            📊 Analytics & Insights
                        </Typography>

                        <Grid container spacing={3}>
                            {/* Club Performance Cards */}
                            <Grid item xs={12} sm={6} md={3}>
                                <Card sx={{ background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)', color: 'white' }}>
                                    <CardContent sx={{ textAlign: 'center' }}>
                                        <GroupsIcon sx={{ fontSize: 40, mb: 1 }} />
                                        <Typography variant="h4" fontWeight="bold">
                                            {stats.totalClubs}
                                        </Typography>
                                        <Typography variant="body2" sx={{ opacity: 0.9 }}>
                                            Total Clubs
                                        </Typography>
                                    </CardContent>
                                </Card>
                            </Grid>

                            <Grid item xs={12} sm={6} md={3}>
                                <Card sx={{ background: 'linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%)', color: '#8B4513' }}>
                                    <CardContent sx={{ textAlign: 'center' }}>
                                        <EventIcon sx={{ fontSize: 40, mb: 1 }} />
                                        <Typography variant="h4" fontWeight="bold">
                                            {stats.totalEvents}
                                        </Typography>
                                        <Typography variant="body2" sx={{ opacity: 0.9 }}>
                                            Total Events
                                        </Typography>
                                    </CardContent>
                                </Card>
                            </Grid>

                            <Grid item xs={12} sm={6} md={3}>
                                <Card sx={{ background: 'linear-gradient(135deg, #a8edea 0%, #fed6e3 100%)', color: '#2E8B57' }}>
                                    <CardContent sx={{ textAlign: 'center' }}>
                                        <PersonIcon sx={{ fontSize: 40, mb: 1 }} />
                                        <Typography variant="h4" fontWeight="bold">
                                            {stats.totalMembers}
                                        </Typography>
                                        <Typography variant="body2" sx={{ opacity: 0.9 }}>
                                            Total Members
                                        </Typography>
                                    </CardContent>
                                </Card>
                            </Grid>

                            <Grid item xs={12} sm={6} md={3}>
                                <Card sx={{ background: 'linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%)', color: '#8B008B' }}>
                                    <CardContent sx={{ textAlign: 'center' }}>
                                        <ScheduleIcon sx={{ fontSize: 40, mb: 1 }} />
                                        <Typography variant="h4" fontWeight="bold">
                                            {stats.upcomingEvents}
                                        </Typography>
                                        <Typography variant="body2" sx={{ opacity: 0.9 }}>
                                            Upcoming Events
                                        </Typography>
                                    </CardContent>
                                </Card>
                            </Grid>

                            {/* Detailed Analytics */}
                            <Grid item xs={12} md={6}>
                                <Card>
                                    <CardHeader
                                        title="📈 Club Performance Metrics"
                                        avatar={<Avatar sx={{ bgcolor: 'primary.main' }}><GroupsIcon /></Avatar>}
                                    />
                                    <CardContent>
                                        <Box display="flex" flexDirection="column" gap={2}>
                                            <Box display="flex" justifyContent="space-between" alignItems="center">
                                                <Typography>Average Members per Club:</Typography>
                                                <Chip
                                                    label={stats.totalClubs > 0 ? Math.round(stats.totalMembers / stats.totalClubs) : 0}
                                                    color="primary"
                                                />
                                            </Box>
                                            <Box display="flex" justifyContent="space-between" alignItems="center">
                                                <Typography>Average Events per Club:</Typography>
                                                <Chip
                                                    label={stats.totalClubs > 0 ? (stats.totalEvents / stats.totalClubs).toFixed(1) : 0}
                                                    color="secondary"
                                                />
                                            </Box>
                                            <Box display="flex" justifyContent="space-between" alignItems="center">
                                                <Typography>Active Clubs:</Typography>
                                                <Chip
                                                    label={myClubs.filter(club => club.isActive !== false).length}
                                                    color="success"
                                                />
                                            </Box>
                                            <Box display="flex" justifyContent="space-between" alignItems="center">
                                                <Typography>Most Popular Category:</Typography>
                                                <Chip
                                                    label={myClubs.length > 0 ?
                                                        myClubs.reduce((prev, current) =>
                                                            myClubs.filter(c => c.category === current.category).length >
                                                                myClubs.filter(c => c.category === prev.category).length ? current : prev
                                                        ).category : 'N/A'}
                                                    color="warning"
                                                />
                                            </Box>
                                        </Box>
                                    </CardContent>
                                </Card>
                            </Grid>

                            <Grid item xs={12} md={6}>
                                <Card>
                                    <CardHeader
                                        title="📅 Event Analytics"
                                        avatar={<Avatar sx={{ bgcolor: 'secondary.main' }}><EventIcon /></Avatar>}
                                    />
                                    <CardContent>
                                        <Box display="flex" flexDirection="column" gap={2}>
                                            <Box display="flex" justifyContent="space-between" alignItems="center">
                                                <Typography>Events This Month:</Typography>
                                                <Chip
                                                    label={myEvents.filter(event => {
                                                        const eventDate = new Date(event.startDate);
                                                        const now = new Date();
                                                        return eventDate.getMonth() === now.getMonth() &&
                                                            eventDate.getFullYear() === now.getFullYear();
                                                    }).length}
                                                    color="primary"
                                                />
                                            </Box>
                                            <Box display="flex" justifyContent="space-between" alignItems="center">
                                                <Typography>Past Events:</Typography>
                                                <Chip
                                                    label={stats.totalEvents - stats.upcomingEvents}
                                                    color="default"
                                                />
                                            </Box>
                                            <Box display="flex" justifyContent="space-between" alignItems="center">
                                                <Typography>Average Attendees:</Typography>
                                                <Chip
                                                    label={myEvents.length > 0 ?
                                                        Math.round(myEvents.reduce((sum, event) =>
                                                            sum + (event.attendees?.length || 0), 0
                                                        ) / myEvents.length) : 0}
                                                    color="success"
                                                />
                                            </Box>
                                            <Box display="flex" justifyContent="space-between" alignItems="center">
                                                <Typography>Most Popular Type:</Typography>
                                                <Chip
                                                    label={myEvents.length > 0 ?
                                                        myEvents.reduce((prev, current) =>
                                                            myEvents.filter(e => e.eventType === current.eventType).length >
                                                                myEvents.filter(e => e.eventType === prev.eventType).length ? current : prev
                                                        ).eventType : 'N/A'}
                                                    color="warning"
                                                />
                                            </Box>
                                        </Box>
                                    </CardContent>
                                </Card>
                            </Grid>

                            {/* Club Details Table */}
                            <Grid item xs={12}>
                                <Card>
                                    <CardHeader
                                        title="🏆 Your Clubs Overview"
                                        avatar={<Avatar sx={{ bgcolor: 'success.main' }}><GroupsIcon /></Avatar>}
                                    />
                                    <CardContent>
                                        {myClubs.length === 0 ? (
                                            <Alert severity="info">You haven't created any clubs yet. Create your first club to see detailed analytics!</Alert>
                                        ) : (
                                            <TableContainer component={Paper} variant="outlined">
                                                <Table>
                                                    <TableHead>
                                                        <TableRow>
                                                            <TableCell><strong>Club Name</strong></TableCell>
                                                            <TableCell><strong>Category</strong></TableCell>
                                                            <TableCell><strong>Members</strong></TableCell>
                                                            <TableCell><strong>Events</strong></TableCell>
                                                            <TableCell><strong>Status</strong></TableCell>
                                                            <TableCell><strong>Growth</strong></TableCell>
                                                        </TableRow>
                                                    </TableHead>
                                                    <TableBody>
                                                        {myClubs.map((club) => (
                                                            <TableRow key={club._id} hover>
                                                                <TableCell>
                                                                    <Box display="flex" alignItems="center" gap={2}>
                                                                        <Avatar sx={{ bgcolor: 'primary.main', width: 32, height: 32 }}>
                                                                            {club.name.charAt(0)}
                                                                        </Avatar>
                                                                        {club.name}
                                                                    </Box>
                                                                </TableCell>
                                                                <TableCell>
                                                                    <Chip label={club.category} size="small" variant="outlined" />
                                                                </TableCell>
                                                                <TableCell>
                                                                    <Box display="flex" alignItems="center" gap={1}>
                                                                        <PersonIcon fontSize="small" />
                                                                        {club.members?.length || 0}
                                                                    </Box>
                                                                </TableCell>
                                                                <TableCell>
                                                                    <Box display="flex" alignItems="center" gap={1}>
                                                                        <EventIcon fontSize="small" />
                                                                        {myEvents.filter(event => event.club?._id === club._id).length}
                                                                    </Box>
                                                                </TableCell>
                                                                <TableCell>
                                                                    <Chip
                                                                        label={club.isActive !== false ? 'Active' : 'Inactive'}
                                                                        color={club.isActive !== false ? 'success' : 'default'}
                                                                        size="small"
                                                                    />
                                                                </TableCell>
                                                                <TableCell>
                                                                    <Chip
                                                                        label={club.members?.length > 10 ? 'High' :
                                                                            club.members?.length > 5 ? 'Medium' : 'Growing'}
                                                                        color={club.members?.length > 10 ? 'success' :
                                                                            club.members?.length > 5 ? 'warning' : 'info'}
                                                                        size="small"
                                                                        variant="outlined"
                                                                    />
                                                                </TableCell>
                                                            </TableRow>
                                                        ))}
                                                    </TableBody>
                                                </Table>
                                            </TableContainer>
                                        )}
                                    </CardContent>
                                </Card>
                            </Grid>

                            {/* Recent Activity Feed */}
                            <Grid item xs={12}>
                                <Card>
                                    <CardHeader
                                        title="📈 Recent Activity & Tips"
                                        avatar={<Avatar sx={{ bgcolor: 'info.main' }}><ScheduleIcon /></Avatar>}
                                    />
                                    <CardContent>
                                        <Grid container spacing={2}>
                                            <Grid item xs={12} md={6}>
                                                <Typography variant="h6" gutterBottom color="primary">
                                                    🎯 Growth Suggestions
                                                </Typography>
                                                <List dense>
                                                    {stats.totalClubs === 0 && (
                                                        <ListItem>
                                                            <ListItemText
                                                                primary="Create your first club"
                                                                secondary="Start building your community by creating a club"
                                                            />
                                                        </ListItem>
                                                    )}
                                                    {stats.totalMembers < 50 && (
                                                        <ListItem>
                                                            <ListItemText
                                                                primary="Invite more members"
                                                                secondary="Reach out to students interested in your club's activities"
                                                            />
                                                        </ListItem>
                                                    )}
                                                    {stats.upcomingEvents === 0 && (
                                                        <ListItem>
                                                            <ListItemText
                                                                primary="Plan upcoming events"
                                                                secondary="Keep members engaged with regular activities"
                                                            />
                                                        </ListItem>
                                                    )}
                                                    <ListItem>
                                                        <ListItemText
                                                            primary="Update social media"
                                                            secondary="Keep your club's online presence active"
                                                        />
                                                    </ListItem>
                                                </List>
                                            </Grid>
                                            <Grid item xs={12} md={6}>
                                                <Typography variant="h6" gutterBottom color="secondary">
                                                    🏆 Achievements
                                                </Typography>
                                                <List dense>
                                                    {stats.totalClubs >= 1 && (
                                                        <ListItem>
                                                            <ListItemText
                                                                primary="Club Founder"
                                                                secondary="You've successfully created your first club!"
                                                            />
                                                        </ListItem>
                                                    )}
                                                    {stats.totalMembers >= 10 && (
                                                        <ListItem>
                                                            <ListItemText
                                                                primary="Community Builder"
                                                                secondary="Your clubs have reached 10+ members!"
                                                            />
                                                        </ListItem>
                                                    )}
                                                    {stats.totalEvents >= 5 && (
                                                        <ListItem>
                                                            <ListItemText
                                                                primary="Event Organizer"
                                                                secondary="You've organized 5+ successful events!"
                                                            />
                                                        </ListItem>
                                                    )}
                                                    {stats.totalClubs >= 3 && (
                                                        <ListItem>
                                                            <ListItemText
                                                                primary="Multi-Club Manager"
                                                                secondary="Managing multiple clubs successfully!"
                                                            />
                                                        </ListItem>
                                                    )}
                                                </List>
                                            </Grid>
                                        </Grid>
                                    </CardContent>
                                </Card>
                            </Grid>
                        </Grid>
                    </CardContent>
                )}

                {/* Priority 3 Tab Panels */}

                {/* Notifications Tab */}
                {tabValue === 3 && (
                    <CardContent>
                        <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
                            <Typography variant="h5">
                                🔔 Notification Center
                            </Typography>
                            <Button
                                variant="contained"
                                startIcon={<NotificationsIcon />}
                                onClick={() => setNotificationSettingsOpen(true)}
                            >
                                Settings
                            </Button>
                        </Box>

                        <Grid container spacing={3}>
                            {/* Recent Notifications */}
                            <Grid item xs={12} md={8}>
                                <Card variant="outlined">
                                    <CardContent>
                                        <Typography variant="h6" gutterBottom>
                                            📬 Recent Notifications
                                        </Typography>
                                        <List>
                                            <ListItem>
                                                <Avatar sx={{ bgcolor: 'primary.main', mr: 2 }}>
                                                    <PersonIcon />
                                                </Avatar>
                                                <ListItemText
                                                    primary="New member joined Tech Club"
                                                    secondary="John Doe joined 2 hours ago"
                                                />
                                            </ListItem>
                                            <Divider />
                                            <ListItem>
                                                <Avatar sx={{ bgcolor: 'success.main', mr: 2 }}>
                                                    <EventIcon />
                                                </Avatar>
                                                <ListItemText
                                                    primary="Workshop registration completed"
                                                    secondary="React Workshop reached capacity"
                                                />
                                            </ListItem>
                                            <Divider />
                                            <ListItem>
                                                <Avatar sx={{ bgcolor: 'warning.main', mr: 2 }}>
                                                    <StarIcon />
                                                </Avatar>
                                                <ListItemText
                                                    primary="Achievement unlocked!"
                                                    secondary="Community Builder badge earned"
                                                />
                                            </ListItem>
                                        </List>
                                    </CardContent>
                                </Card>
                            </Grid>

                            {/* Notification Stats */}
                            <Grid item xs={12} md={4}>
                                <Card variant="outlined">
                                    <CardContent>
                                        <Typography variant="h6" gutterBottom>
                                            📊 Notification Statistics
                                        </Typography>
                                        <Box sx={{ mb: 2 }}>
                                            <Typography variant="body2" color="textSecondary">
                                                Total Sent Today
                                            </Typography>
                                            <Typography variant="h4" color="primary">
                                                24
                                            </Typography>
                                        </Box>
                                        <Box sx={{ mb: 2 }}>
                                            <Typography variant="body2" color="textSecondary">
                                                Email Open Rate
                                            </Typography>
                                            <Typography variant="h4" color="success.main">
                                                76%
                                            </Typography>
                                        </Box>
                                        <Box>
                                            <Typography variant="body2" color="textSecondary">
                                                Active Subscribers
                                            </Typography>
                                            <Typography variant="h4" color="info.main">
                                                156
                                            </Typography>
                                        </Box>
                                    </CardContent>
                                </Card>
                            </Grid>
                        </Grid>
                    </CardContent>
                )}

                {/* Advanced Reports Tab */}
                {tabValue === 4 && (
                    <CardContent>
                        <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
                            <Typography variant="h5">
                                📈 Advanced Analytics & Reports
                            </Typography>
                            <Box>
                                <FormControl sx={{ mr: 2, minWidth: 160 }}>
                                    <InputLabel>Report Type</InputLabel>
                                    <Select
                                        value={reportType}
                                        label="Report Type"
                                        onChange={(e) => setReportType(e.target.value)}
                                    >
                                        <MenuItem value="engagement">Member Engagement</MenuItem>
                                        <MenuItem value="financial">Financial Report</MenuItem>
                                        <MenuItem value="events">Event Performance</MenuItem>
                                        <MenuItem value="growth">Growth Analysis</MenuItem>
                                    </Select>
                                </FormControl>
                                <Button
                                    variant="contained"
                                    startIcon={<FileDownloadIcon />}
                                    color="secondary"
                                >
                                    Export PDF
                                </Button>
                            </Box>
                        </Box>

                        <Grid container spacing={3}>
                            {/* Financial Overview */}
                            <Grid item xs={12} md={6}>
                                <Card variant="outlined">
                                    <CardContent>
                                        <Typography variant="h6" gutterBottom>
                                            💰 Financial Overview
                                        </Typography>
                                        <Box sx={{ mb: 2 }}>
                                            <Typography variant="body2" color="textSecondary">
                                                Total Revenue (This Month)
                                            </Typography>
                                            <Typography variant="h4" color="success.main">
                                                $2,450
                                            </Typography>
                                        </Box>
                                        <Box sx={{ mb: 2 }}>
                                            <Typography variant="body2" color="textSecondary">
                                                Expenses
                                            </Typography>
                                            <Typography variant="h4" color="error.main">
                                                $890
                                            </Typography>
                                        </Box>
                                        <Box>
                                            <Typography variant="body2" color="textSecondary">
                                                Net Profit
                                            </Typography>
                                            <Typography variant="h4" color="primary.main">
                                                $1,560
                                            </Typography>
                                        </Box>
                                    </CardContent>
                                </Card>
                            </Grid>

                            {/* Member Engagement Analytics */}
                            <Grid item xs={12} md={6}>
                                <Card variant="outlined">
                                    <CardContent>
                                        <Typography variant="h6" gutterBottom>
                                            👥 Member Engagement
                                        </Typography>
                                        <Box sx={{ mb: 2 }}>
                                            <Typography variant="body2" color="textSecondary">
                                                Average Event Attendance
                                            </Typography>
                                            <Typography variant="h4" color="info.main">
                                                78%
                                            </Typography>
                                        </Box>
                                        <Box sx={{ mb: 2 }}>
                                            <Typography variant="body2" color="textSecondary">
                                                Active Members
                                            </Typography>
                                            <Typography variant="h4" color="success.main">
                                                89%
                                            </Typography>
                                        </Box>
                                        <Box>
                                            <Typography variant="body2" color="textSecondary">
                                                Member Retention Rate
                                            </Typography>
                                            <Typography variant="h4" color="primary.main">
                                                92%
                                            </Typography>
                                        </Box>
                                    </CardContent>
                                </Card>
                            </Grid>

                            {/* Detailed Analytics Table */}
                            <Grid item xs={12}>
                                <Card variant="outlined">
                                    <CardContent>
                                        <Typography variant="h6" gutterBottom>
                                            📊 Detailed Event Performance
                                        </Typography>
                                        <TableContainer>
                                            <Table>
                                                <TableHead>
                                                    <TableRow>
                                                        <TableCell><strong>Event Name</strong></TableCell>
                                                        <TableCell><strong>Date</strong></TableCell>
                                                        <TableCell><strong>Registrations</strong></TableCell>
                                                        <TableCell><strong>Attendance</strong></TableCell>
                                                        <TableCell><strong>Revenue</strong></TableCell>
                                                        <TableCell><strong>Rating</strong></TableCell>
                                                    </TableRow>
                                                </TableHead>
                                                <TableBody>
                                                    <TableRow>
                                                        <TableCell>React Workshop</TableCell>
                                                        <TableCell>Dec 15, 2024</TableCell>
                                                        <TableCell>45</TableCell>
                                                        <TableCell>42 (93%)</TableCell>
                                                        <TableCell>$450</TableCell>
                                                        <TableCell>⭐ 4.8/5</TableCell>
                                                    </TableRow>
                                                    <TableRow>
                                                        <TableCell>AI Symposium</TableCell>
                                                        <TableCell>Dec 10, 2024</TableCell>
                                                        <TableCell>120</TableCell>
                                                        <TableCell>98 (82%)</TableCell>
                                                        <TableCell>$1,200</TableCell>
                                                        <TableCell>⭐ 4.6/5</TableCell>
                                                    </TableRow>
                                                    <TableRow>
                                                        <TableCell>Study Group</TableCell>
                                                        <TableCell>Dec 8, 2024</TableCell>
                                                        <TableCell>25</TableCell>
                                                        <TableCell>23 (92%)</TableCell>
                                                        <TableCell>$0</TableCell>
                                                        <TableCell>⭐ 4.9/5</TableCell>
                                                    </TableRow>
                                                </TableBody>
                                            </Table>
                                        </TableContainer>
                                    </CardContent>
                                </Card>
                            </Grid>
                        </Grid>
                    </CardContent>
                )}

                {/* Achievements Tab */}
                {tabValue === 5 && (
                    <CardContent>
                        <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
                            <Typography variant="h5">
                                🏆 Achievement & Recognition System
                            </Typography>
                            <Button
                                variant="contained"
                                startIcon={<BadgeIcon />}
                                onClick={() => setAchievementSystemOpen(true)}
                            >
                                Award Badge
                            </Button>
                        </Box>

                        <Grid container spacing={3}>
                            {/* Member Leaderboard */}
                            <Grid item xs={12} md={6}>
                                <Card variant="outlined">
                                    <CardContent>
                                        <Typography variant="h6" gutterBottom>
                                            🥇 Member Leaderboard
                                        </Typography>
                                        <List>
                                            <ListItem>
                                                <Avatar sx={{ bgcolor: 'gold', mr: 2 }}>1</Avatar>
                                                <ListItemText
                                                    primary="Sarah Johnson"
                                                    secondary="1,250 points • 8 events attended"
                                                />
                                                <Chip label="MVP" color="warning" size="small" />
                                            </ListItem>
                                            <ListItem>
                                                <Avatar sx={{ bgcolor: 'silver', mr: 2 }}>2</Avatar>
                                                <ListItemText
                                                    primary="Mike Chen"
                                                    secondary="980 points • 6 events attended"
                                                />
                                                <Chip label="Star" color="info" size="small" />
                                            </ListItem>
                                            <ListItem>
                                                <Avatar sx={{ bgcolor: '#cd7f32', mr: 2 }}>3</Avatar>
                                                <ListItemText
                                                    primary="Emma Wilson"
                                                    secondary="750 points • 5 events attended"
                                                />
                                                <Chip label="Rising Star" color="secondary" size="small" />
                                            </ListItem>
                                        </List>
                                    </CardContent>
                                </Card>
                            </Grid>

                            {/* Achievement Badges */}
                            <Grid item xs={12} md={6}>
                                <Card variant="outlined">
                                    <CardContent>
                                        <Typography variant="h6" gutterBottom>
                                            🎖️ Available Badges
                                        </Typography>
                                        <Grid container spacing={2}>
                                            <Grid item xs={6}>
                                                <Card variant="outlined" sx={{ textAlign: 'center', p: 2 }}>
                                                    <EmojiEventsIcon sx={{ fontSize: 40, color: 'gold' }} />
                                                    <Typography variant="subtitle2">
                                                        Event Champion
                                                    </Typography>
                                                    <Typography variant="caption" color="textSecondary">
                                                        Attend 10 events
                                                    </Typography>
                                                </Card>
                                            </Grid>
                                            <Grid item xs={6}>
                                                <Card variant="outlined" sx={{ textAlign: 'center', p: 2 }}>
                                                    <PeopleOutlineIcon sx={{ fontSize: 40, color: 'blue' }} />
                                                    <Typography variant="subtitle2">
                                                        Social Butterfly
                                                    </Typography>
                                                    <Typography variant="caption" color="textSecondary">
                                                        Refer 5 members
                                                    </Typography>
                                                </Card>
                                            </Grid>
                                            <Grid item xs={6}>
                                                <Card variant="outlined" sx={{ textAlign: 'center', p: 2 }}>
                                                    <StarIcon sx={{ fontSize: 40, color: 'purple' }} />
                                                    <Typography variant="subtitle2">
                                                        Volunteer Hero
                                                    </Typography>
                                                    <Typography variant="caption" color="textSecondary">
                                                        Help organize 3 events
                                                    </Typography>
                                                </Card>
                                            </Grid>
                                            <Grid item xs={6}>
                                                <Card variant="outlined" sx={{ textAlign: 'center', p: 2 }}>
                                                    <TrendingUpIcon sx={{ fontSize: 40, color: 'green' }} />
                                                    <Typography variant="subtitle2">
                                                        Growth Master
                                                    </Typography>
                                                    <Typography variant="caption" color="textSecondary">
                                                        Grow club to 50+ members
                                                    </Typography>
                                                </Card>
                                            </Grid>
                                        </Grid>
                                    </CardContent>
                                </Card>
                            </Grid>

                            {/* Recognition Certificates */}
                            <Grid item xs={12}>
                                <Card variant="outlined">
                                    <CardContent>
                                        <Typography variant="h6" gutterBottom>
                                            📜 Recognition Certificates
                                        </Typography>
                                        <Button
                                            variant="outlined"
                                            startIcon={<FileDownloadIcon />}
                                            sx={{ mr: 2 }}
                                        >
                                            Generate Certificate
                                        </Button>
                                        <Button
                                            variant="outlined"
                                            startIcon={<BadgeIcon />}
                                        >
                                            Bulk Award Badges
                                        </Button>
                                    </CardContent>
                                </Card>
                            </Grid>
                        </Grid>
                    </CardContent>
                )}

                {/* Event Templates Tab */}
                {tabValue === 6 && (
                    <CardContent>
                        <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
                            <Typography variant="h5">
                                📋 Event Templates & Bulk Management
                            </Typography>
                            <Box>
                                <Button
                                    variant="outlined"
                                    startIcon={<AddIcon />}
                                    sx={{ mr: 2 }}
                                    onClick={() => setEventTemplatesOpen(true)}
                                >
                                    Create Template
                                </Button>
                                <Button
                                    variant="contained"
                                    startIcon={<EventIcon />}
                                    onClick={() => setBulkEventCreationOpen(true)}
                                >
                                    Bulk Create Events
                                </Button>
                            </Box>
                        </Box>

                        <Grid container spacing={3}>
                            {/* Event Templates */}
                            <Grid item xs={12} md={8}>
                                <Card variant="outlined">
                                    <CardContent>
                                        <Typography variant="h6" gutterBottom>
                                            📝 Saved Templates
                                        </Typography>
                                        <Grid container spacing={2}>
                                            <Grid item xs={12} sm={6}>
                                                <Card variant="outlined">
                                                    <CardContent>
                                                        <Typography variant="subtitle1" gutterBottom>
                                                            Workshop Template
                                                        </Typography>
                                                        <Typography variant="body2" color="textSecondary" gutterBottom>
                                                            Standard workshop format with Q&A
                                                        </Typography>
                                                        <Box>
                                                            <Button size="small" startIcon={<EditIcon />}>
                                                                Use Template
                                                            </Button>
                                                        </Box>
                                                    </CardContent>
                                                </Card>
                                            </Grid>
                                            <Grid item xs={12} sm={6}>
                                                <Card variant="outlined">
                                                    <CardContent>
                                                        <Typography variant="subtitle1" gutterBottom>
                                                            Social Event Template
                                                        </Typography>
                                                        <Typography variant="body2" color="textSecondary" gutterBottom>
                                                            Casual meetup and networking
                                                        </Typography>
                                                        <Box>
                                                            <Button size="small" startIcon={<EditIcon />}>
                                                                Use Template
                                                            </Button>
                                                        </Box>
                                                    </CardContent>
                                                </Card>
                                            </Grid>
                                            <Grid item xs={12} sm={6}>
                                                <Card variant="outlined">
                                                    <CardContent>
                                                        <Typography variant="subtitle1" gutterBottom>
                                                            Competition Template
                                                        </Typography>
                                                        <Typography variant="body2" color="textSecondary" gutterBottom>
                                                            Competitive event with prizes
                                                        </Typography>
                                                        <Box>
                                                            <Button size="small" startIcon={<EditIcon />}>
                                                                Use Template
                                                            </Button>
                                                        </Box>
                                                    </CardContent>
                                                </Card>
                                            </Grid>
                                            <Grid item xs={12} sm={6}>
                                                <Card variant="outlined">
                                                    <CardContent>
                                                        <Typography variant="subtitle1" gutterBottom>
                                                            Meeting Template
                                                        </Typography>
                                                        <Typography variant="body2" color="textSecondary" gutterBottom>
                                                            Regular club meeting agenda
                                                        </Typography>
                                                        <Box>
                                                            <Button size="small" startIcon={<EditIcon />}>
                                                                Use Template
                                                            </Button>
                                                        </Box>
                                                    </CardContent>
                                                </Card>
                                            </Grid>
                                        </Grid>
                                    </CardContent>
                                </Card>
                            </Grid>

                            {/* Scheduling Conflicts */}
                            <Grid item xs={12} md={4}>
                                <Card variant="outlined">
                                    <CardContent>
                                        <Typography variant="h6" gutterBottom>
                                            ⚠️ Scheduling Conflicts
                                        </Typography>
                                        <Alert severity="warning" sx={{ mb: 2 }}>
                                            2 potential conflicts detected
                                        </Alert>
                                        <List dense>
                                            <ListItem>
                                                <ListItemText
                                                    primary="React Workshop"
                                                    secondary="Conflicts with JavaScript Basics"
                                                />
                                            </ListItem>
                                            <ListItem>
                                                <ListItemText
                                                    primary="Study Session"
                                                    secondary="Same time as University exam"
                                                />
                                            </ListItem>
                                        </List>
                                    </CardContent>
                                </Card>
                            </Grid>
                        </Grid>
                    </CardContent>
                )}

                {/* Communication Hub Tab */}
                {tabValue === 7 && (
                    <CardContent>
                        <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
                            <Typography variant="h5">
                                💬 Communication Hub
                            </Typography>
                            <Button
                                variant="contained"
                                startIcon={<MessageIcon />}
                                onClick={() => setCommunicationHubOpen(true)}
                            >
                                New Announcement
                            </Button>
                        </Box>

                        <Grid container spacing={3}>
                            {/* Messaging System */}
                            <Grid item xs={12} md={8}>
                                <Card variant="outlined" sx={{ height: 500 }}>
                                    <CardContent>
                                        <Typography variant="h6" gutterBottom>
                                            💬 Club Messages
                                        </Typography>
                                        <Box sx={{
                                            height: 350,
                                            border: 1,
                                            borderColor: 'divider',
                                            borderRadius: 1,
                                            p: 2,
                                            overflow: 'auto'
                                        }}>
                                            <List>
                                                <ListItem>
                                                    <Avatar sx={{ mr: 2 }}>SJ</Avatar>
                                                    <ListItemText
                                                        primary="Sarah Johnson"
                                                        secondary="Thanks for organizing the workshop! It was amazing 🎉"
                                                    />
                                                </ListItem>
                                                <ListItem>
                                                    <Avatar sx={{ mr: 2 }}>MC</Avatar>
                                                    <ListItemText
                                                        primary="Mike Chen"
                                                        secondary="When is the next study session?"
                                                    />
                                                </ListItem>
                                                <ListItem>
                                                    <Avatar sx={{ mr: 2 }}>EW</Avatar>
                                                    <ListItemText
                                                        primary="Emma Wilson"
                                                        secondary="Can we have more hands-on activities?"
                                                    />
                                                </ListItem>
                                            </List>
                                        </Box>
                                        <Box sx={{ mt: 2, display: 'flex', gap: 1 }}>
                                            <TextField
                                                fullWidth
                                                placeholder="Type a message..."
                                                value={newMessage}
                                                onChange={(e) => setNewMessage(e.target.value)}
                                                size="small"
                                            />
                                            <Button variant="contained" size="small">
                                                Send
                                            </Button>
                                        </Box>
                                    </CardContent>
                                </Card>
                            </Grid>

                            {/* Announcements */}
                            <Grid item xs={12} md={4}>
                                <Card variant="outlined">
                                    <CardContent>
                                        <Typography variant="h6" gutterBottom>
                                            📢 Recent Announcements
                                        </Typography>
                                        <List>
                                            <ListItem>
                                                <ListItemText
                                                    primary="Workshop Reminder"
                                                    secondary="React workshop tomorrow at 2 PM"
                                                />
                                            </ListItem>
                                            <Divider />
                                            <ListItem>
                                                <ListItemText
                                                    primary="New Club Merch"
                                                    secondary="T-shirts available for pre-order"
                                                />
                                            </ListItem>
                                            <Divider />
                                            <ListItem>
                                                <ListItemText
                                                    primary="Election Notice"
                                                    secondary="Officer elections next month"
                                                />
                                            </ListItem>
                                        </List>
                                    </CardContent>
                                </Card>

                                {/* Discussion Forums */}
                                <Card variant="outlined" sx={{ mt: 2 }}>
                                    <CardContent>
                                        <Typography variant="h6" gutterBottom>
                                            🗣️ Discussion Forums
                                        </Typography>
                                        <List dense>
                                            <ListItem button>
                                                <ForumIcon sx={{ mr: 2 }} />
                                                <ListItemText
                                                    primary="General Discussion"
                                                    secondary="42 messages"
                                                />
                                            </ListItem>
                                            <ListItem button>
                                                <ForumIcon sx={{ mr: 2 }} />
                                                <ListItemText
                                                    primary="Event Planning"
                                                    secondary="23 messages"
                                                />
                                            </ListItem>
                                            <ListItem button>
                                                <ForumIcon sx={{ mr: 2 }} />
                                                <ListItemText
                                                    primary="Tech Help"
                                                    secondary="15 messages"
                                                />
                                            </ListItem>
                                        </List>
                                    </CardContent>
                                </Card>
                            </Grid>
                        </Grid>
                    </CardContent>
                )}

                {/* Role Management Tab */}
                {tabValue === 8 && (
                    <CardContent>
                        <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
                            <Typography variant="h5">
                                🔐 Advanced Role Management
                            </Typography>
                            <Button
                                variant="contained"
                                startIcon={<SecurityIcon />}
                                onClick={() => setRoleManagementOpen(true)}
                            >
                                Create Custom Role
                            </Button>
                        </Box>

                        <Grid container spacing={3}>
                            {/* Role Hierarchy */}
                            <Grid item xs={12} md={6}>
                                <Card variant="outlined">
                                    <CardContent>
                                        <Typography variant="h6" gutterBottom>
                                            👑 Role Hierarchy
                                        </Typography>
                                        <List>
                                            <ListItem>
                                                <Avatar sx={{ bgcolor: 'error.main', mr: 2 }}>
                                                    <SecurityIcon />
                                                </Avatar>
                                                <ListItemText
                                                    primary="Club President"
                                                    secondary="Full administrative access"
                                                />
                                                <Chip label="You" color="primary" size="small" />
                                            </ListItem>
                                            <ListItem>
                                                <Avatar sx={{ bgcolor: 'warning.main', mr: 2 }}>
                                                    <PersonIcon />
                                                </Avatar>
                                                <ListItemText
                                                    primary="Vice President"
                                                    secondary="Event management & member oversight"
                                                />
                                                <Chip label="2 users" color="info" size="small" />
                                            </ListItem>
                                            <ListItem>
                                                <Avatar sx={{ bgcolor: 'info.main', mr: 2 }}>
                                                    <GroupsIcon />
                                                </Avatar>
                                                <ListItemText
                                                    primary="Officer"
                                                    secondary="Limited event and member management"
                                                />
                                                <Chip label="5 users" color="info" size="small" />
                                            </ListItem>
                                            <ListItem>
                                                <Avatar sx={{ bgcolor: 'success.main', mr: 2 }}>
                                                    <PersonIcon />
                                                </Avatar>
                                                <ListItemText
                                                    primary="Member"
                                                    secondary="Basic access to events and forums"
                                                />
                                                <Chip label="48 users" color="info" size="small" />
                                            </ListItem>
                                        </List>
                                    </CardContent>
                                </Card>
                            </Grid>

                            {/* Permission Matrix */}
                            <Grid item xs={12} md={6}>
                                <Card variant="outlined">
                                    <CardContent>
                                        <Typography variant="h6" gutterBottom>
                                            📋 Permission Matrix
                                        </Typography>
                                        <TableContainer>
                                            <Table size="small">
                                                <TableHead>
                                                    <TableRow>
                                                        <TableCell><strong>Permission</strong></TableCell>
                                                        <TableCell><strong>President</strong></TableCell>
                                                        <TableCell><strong>VP</strong></TableCell>
                                                        <TableCell><strong>Officer</strong></TableCell>
                                                        <TableCell><strong>Member</strong></TableCell>
                                                    </TableRow>
                                                </TableHead>
                                                <TableBody>
                                                    <TableRow>
                                                        <TableCell>Create Events</TableCell>
                                                        <TableCell>✅</TableCell>
                                                        <TableCell>✅</TableCell>
                                                        <TableCell>✅</TableCell>
                                                        <TableCell>❌</TableCell>
                                                    </TableRow>
                                                    <TableRow>
                                                        <TableCell>Manage Members</TableCell>
                                                        <TableCell>✅</TableCell>
                                                        <TableCell>✅</TableCell>
                                                        <TableCell>📝</TableCell>
                                                        <TableCell>❌</TableCell>
                                                    </TableRow>
                                                    <TableRow>
                                                        <TableCell>Financial Access</TableCell>
                                                        <TableCell>✅</TableCell>
                                                        <TableCell>👀</TableCell>
                                                        <TableCell>❌</TableCell>
                                                        <TableCell>❌</TableCell>
                                                    </TableRow>
                                                    <TableRow>
                                                        <TableCell>Send Announcements</TableCell>
                                                        <TableCell>✅</TableCell>
                                                        <TableCell>✅</TableCell>
                                                        <TableCell>✅</TableCell>
                                                        <TableCell>❌</TableCell>
                                                    </TableRow>
                                                    <TableRow>
                                                        <TableCell>Award Badges</TableCell>
                                                        <TableCell>✅</TableCell>
                                                        <TableCell>✅</TableCell>
                                                        <TableCell>❌</TableCell>
                                                        <TableCell>❌</TableCell>
                                                    </TableRow>
                                                </TableBody>
                                            </Table>
                                        </TableContainer>
                                    </CardContent>
                                </Card>
                            </Grid>

                            {/* Custom Roles */}
                            <Grid item xs={12}>
                                <Card variant="outlined">
                                    <CardContent>
                                        <Typography variant="h6" gutterBottom>
                                            🎭 Custom Roles
                                        </Typography>
                                        <Grid container spacing={2}>
                                            <Grid item xs={12} sm={6} md={3}>
                                                <Card variant="outlined">
                                                    <CardContent sx={{ textAlign: 'center' }}>
                                                        <SecurityIcon sx={{ fontSize: 40, color: 'purple' }} />
                                                        <Typography variant="subtitle1">
                                                            Event Coordinator
                                                        </Typography>
                                                        <Typography variant="caption" color="textSecondary">
                                                            Specialized in event management
                                                        </Typography>
                                                        <Box sx={{ mt: 1 }}>
                                                            <Button size="small">Edit</Button>
                                                        </Box>
                                                    </CardContent>
                                                </Card>
                                            </Grid>
                                            <Grid item xs={12} sm={6} md={3}>
                                                <Card variant="outlined">
                                                    <CardContent sx={{ textAlign: 'center' }}>
                                                        <MessageIcon sx={{ fontSize: 40, color: 'green' }} />
                                                        <Typography variant="subtitle1">
                                                            Social Media Manager
                                                        </Typography>
                                                        <Typography variant="caption" color="textSecondary">
                                                            Handles communications
                                                        </Typography>
                                                        <Box sx={{ mt: 1 }}>
                                                            <Button size="small">Edit</Button>
                                                        </Box>
                                                    </CardContent>
                                                </Card>
                                            </Grid>
                                            <Grid item xs={12} sm={6} md={3}>
                                                <Card variant="outlined">
                                                    <CardContent sx={{ textAlign: 'center' }}>
                                                        <AnalyticsIcon sx={{ fontSize: 40, color: 'orange' }} />
                                                        <Typography variant="subtitle1">
                                                            Treasurer
                                                        </Typography>
                                                        <Typography variant="caption" color="textSecondary">
                                                            Financial management
                                                        </Typography>
                                                        <Box sx={{ mt: 1 }}>
                                                            <Button size="small">Edit</Button>
                                                        </Box>
                                                    </CardContent>
                                                </Card>
                                            </Grid>
                                            <Grid item xs={12} sm={6} md={3}>
                                                <Card
                                                    variant="outlined"
                                                    sx={{
                                                        borderStyle: 'dashed',
                                                        cursor: 'pointer',
                                                        '&:hover': { bgcolor: 'action.hover' }
                                                    }}
                                                    onClick={() => setRoleManagementOpen(true)}
                                                >
                                                    <CardContent sx={{ textAlign: 'center' }}>
                                                        <AddIcon sx={{ fontSize: 40, color: 'grey.500' }} />
                                                        <Typography variant="subtitle1" color="textSecondary">
                                                            Create New Role
                                                        </Typography>
                                                    </CardContent>
                                                </Card>
                                            </Grid>
                                        </Grid>
                                    </CardContent>
                                </Card>
                            </Grid>
                        </Grid>
                    </CardContent>
                )}
            </Card>

            {/* Note: Club Form, Event Form, Member Management, and Attendee Management dialogs would be here */}
            {/* For brevity, I'll add placeholders for these complex components */}

            {/* Club Form Dialog */}
            <Dialog open={clubFormOpen} onClose={handleClubFormClose} maxWidth="md" fullWidth>
                <form onSubmit={handleClubFormSubmit}>
                    <DialogTitle sx={{ bgcolor: 'primary.main', color: 'white', display: 'flex', alignItems: 'center', gap: 2 }}>
                        <GroupsIcon />
                        {editMode ? 'Edit Club' : 'Create New Club'}
                    </DialogTitle>
                    <DialogContent sx={{ mt: 2 }}>
                        <Grid container spacing={3}>
                            {/* Basic Information */}
                            <Grid item xs={12}>
                                <Typography variant="h6" gutterBottom color="primary">
                                    📋 Basic Information
                                </Typography>
                            </Grid>

                            <Grid item xs={12} sm={6}>
                                <TextField
                                    label="Club Name"
                                    value={clubFormData.name}
                                    onChange={(e) => handleClubFormChange('name', e.target.value)}
                                    fullWidth
                                    required
                                    error={!!formErrors.name}
                                    helperText={formErrors.name}
                                />
                            </Grid>

                            <Grid item xs={12} sm={6}>
                                <FormControl fullWidth required error={!!formErrors.category}>
                                    <InputLabel>Category</InputLabel>
                                    <Select
                                        value={clubFormData.category}
                                        onChange={(e) => handleClubFormChange('category', e.target.value)}
                                        label="Category"
                                    >
                                        <MenuItem value="Academic">Academic</MenuItem>
                                        <MenuItem value="Sports">Sports</MenuItem>
                                        <MenuItem value="Arts">Arts</MenuItem>
                                        <MenuItem value="Technology">Technology</MenuItem>
                                        <MenuItem value="Social">Social</MenuItem>
                                        <MenuItem value="Professional">Professional</MenuItem>
                                        <MenuItem value="Community Service">Community Service</MenuItem>
                                        <MenuItem value="Special Interest">Special Interest</MenuItem>
                                    </Select>
                                    {formErrors.category && (
                                        <Typography variant="caption" color="error" sx={{ ml: 2 }}>
                                            {formErrors.category}
                                        </Typography>
                                    )}
                                </FormControl>
                            </Grid>

                            <Grid item xs={12}>
                                <TextField
                                    label="Description"
                                    value={clubFormData.description}
                                    onChange={(e) => handleClubFormChange('description', e.target.value)}
                                    fullWidth
                                    multiline
                                    rows={3}
                                    required
                                    error={!!formErrors.description}
                                    helperText={formErrors.description || "Describe your club's mission and activities"}
                                />
                            </Grid>

                            <Grid item xs={12} sm={6}>
                                <TextField
                                    label="Contact Email"
                                    type="email"
                                    value={clubFormData.contactEmail}
                                    onChange={(e) => handleClubFormChange('contactEmail', e.target.value)}
                                    fullWidth
                                    required
                                    error={!!formErrors.contactEmail}
                                    helperText={formErrors.contactEmail}
                                />
                            </Grid>

                            <Grid item xs={12} sm={6}>
                                <TextField
                                    label="Membership Fee ($)"
                                    type="number"
                                    value={clubFormData.membershipFee}
                                    onChange={(e) => handleClubFormChange('membershipFee', e.target.value)}
                                    fullWidth
                                    inputProps={{ min: 0, step: 0.01 }}
                                    helperText="Set to 0 if free membership"
                                />
                            </Grid>

                            {/* Meeting Schedule */}
                            <Grid item xs={12}>
                                <Divider sx={{ my: 2 }} />
                                <Typography variant="h6" gutterBottom color="primary">
                                    📅 Meeting Schedule
                                </Typography>
                            </Grid>

                            <Grid item xs={12} sm={4}>
                                <TextField
                                    label="Meeting Day"
                                    value={clubFormData.meetingSchedule.day}
                                    onChange={(e) => handleClubNestedFormChange('meetingSchedule', 'day', e.target.value)}
                                    fullWidth
                                    placeholder="e.g., Every Monday"
                                />
                            </Grid>

                            <Grid item xs={12} sm={4}>
                                <TextField
                                    label="Meeting Time"
                                    value={clubFormData.meetingSchedule.time}
                                    onChange={(e) => handleClubNestedFormChange('meetingSchedule', 'time', e.target.value)}
                                    fullWidth
                                    placeholder="e.g., 7:00 PM - 8:00 PM"
                                />
                            </Grid>

                            <Grid item xs={12} sm={4}>
                                <TextField
                                    label="Meeting Location"
                                    value={clubFormData.meetingSchedule.location}
                                    onChange={(e) => handleClubNestedFormChange('meetingSchedule', 'location', e.target.value)}
                                    fullWidth
                                    placeholder="e.g., Room 101"
                                />
                            </Grid>

                            {/* Faculty Advisors */}
                            <Grid item xs={12}>
                                <Divider sx={{ my: 2 }} />
                                <Typography variant="h6" gutterBottom color="primary">
                                    👨‍🏫 Faculty Advisors
                                </Typography>
                            </Grid>

                            {clubFormData.advisors.map((advisor, index) => (
                                <Grid item xs={12} key={index}>
                                    <Box display="flex" gap={1} alignItems="center">
                                        <TextField
                                            label={`Advisor ${index + 1}`}
                                            value={advisor}
                                            onChange={(e) => handleClubArrayChange('advisors', index, e.target.value)}
                                            fullWidth
                                            placeholder="Dr. John Smith"
                                        />
                                        <Button
                                            onClick={() => addArrayItem('advisors')}
                                            variant="outlined"
                                            size="small"
                                            sx={{ minWidth: 'auto', px: 1 }}
                                        >
                                            +
                                        </Button>
                                        {clubFormData.advisors.length > 1 && (
                                            <Button
                                                onClick={() => removeArrayItem('advisors', index)}
                                                variant="outlined"
                                                color="error"
                                                size="small"
                                                sx={{ minWidth: 'auto', px: 1 }}
                                            >
                                                -
                                            </Button>
                                        )}
                                    </Box>
                                </Grid>
                            ))}

                            {/* Social Media */}
                            <Grid item xs={12}>
                                <Divider sx={{ my: 2 }} />
                                <Typography variant="h6" gutterBottom color="primary">
                                    🌐 Social Media & Online Presence
                                </Typography>
                            </Grid>

                            <Grid item xs={12} sm={6}>
                                <TextField
                                    label="Facebook"
                                    value={clubFormData.socialMedia.facebook}
                                    onChange={(e) => handleClubNestedFormChange('socialMedia', 'facebook', e.target.value)}
                                    fullWidth
                                    placeholder="https://facebook.com/yourclub"
                                    InputProps={{
                                        startAdornment: <FacebookIcon sx={{ mr: 1, color: '#1877F2' }} />
                                    }}
                                />
                            </Grid>

                            <Grid item xs={12} sm={6}>
                                <TextField
                                    label="Instagram"
                                    value={clubFormData.socialMedia.instagram}
                                    onChange={(e) => handleClubNestedFormChange('socialMedia', 'instagram', e.target.value)}
                                    fullWidth
                                    placeholder="https://instagram.com/yourclub"
                                    InputProps={{
                                        startAdornment: <InstagramIcon sx={{ mr: 1, color: '#E4405F' }} />
                                    }}
                                />
                            </Grid>

                            <Grid item xs={12} sm={6}>
                                <TextField
                                    label="Twitter"
                                    value={clubFormData.socialMedia.twitter}
                                    onChange={(e) => handleClubNestedFormChange('socialMedia', 'twitter', e.target.value)}
                                    fullWidth
                                    placeholder="https://twitter.com/yourclub"
                                    InputProps={{
                                        startAdornment: <TwitterIcon sx={{ mr: 1, color: '#1DA1F2' }} />
                                    }}
                                />
                            </Grid>

                            <Grid item xs={12} sm={6}>
                                <TextField
                                    label="LinkedIn"
                                    value={clubFormData.socialMedia.linkedin}
                                    onChange={(e) => handleClubNestedFormChange('socialMedia', 'linkedin', e.target.value)}
                                    fullWidth
                                    placeholder="https://linkedin.com/company/yourclub"
                                    InputProps={{
                                        startAdornment: <LinkedInIcon sx={{ mr: 1, color: '#0077B5' }} />
                                    }}
                                />
                            </Grid>

                            <Grid item xs={12}>
                                <TextField
                                    label="Website"
                                    value={clubFormData.socialMedia.website}
                                    onChange={(e) => handleClubNestedFormChange('socialMedia', 'website', e.target.value)}
                                    fullWidth
                                    placeholder="https://yourclub.com"
                                    InputProps={{
                                        startAdornment: <WebIcon sx={{ mr: 1, color: 'primary.main' }} />
                                    }}
                                />
                            </Grid>
                        </Grid>
                    </DialogContent>
                    <DialogActions sx={{ p: 3, gap: 1 }}>
                        <Button onClick={handleClubFormClose} variant="outlined">
                            Cancel
                        </Button>
                        <Button
                            type="submit"
                            variant="contained"
                            disabled={submitLoading}
                            startIcon={submitLoading ? <CircularProgress size={16} /> : <SaveIcon />}
                            sx={{ minWidth: 120 }}
                        >
                            {submitLoading ? 'Saving...' : (editMode ? 'Update Club' : 'Create Club')}
                        </Button>
                    </DialogActions>
                </form>
            </Dialog>

            {/* Event Form Dialog */}
            <Dialog open={eventFormOpen} onClose={handleEventFormClose} maxWidth="md" fullWidth>
                <form onSubmit={handleEventFormSubmit}>
                    <DialogTitle sx={{ bgcolor: 'secondary.main', color: 'white', display: 'flex', alignItems: 'center', gap: 2 }}>
                        <EventIcon />
                        {editMode ? 'Edit Event' : 'Create New Event'}
                    </DialogTitle>
                    <DialogContent sx={{ mt: 2 }}>
                        <Grid container spacing={3}>
                            {/* Basic Information */}
                            <Grid item xs={12}>
                                <Typography variant="h6" gutterBottom color="primary">
                                    📋 Event Information
                                </Typography>
                            </Grid>

                            <Grid item xs={12} sm={6}>
                                <TextField
                                    label="Event Title"
                                    value={eventFormData.title}
                                    onChange={(e) => handleEventFormChange('title', e.target.value)}
                                    fullWidth
                                    required
                                    error={!!formErrors.title}
                                    helperText={formErrors.title}
                                />
                            </Grid>

                            <Grid item xs={12} sm={6}>
                                <FormControl fullWidth required error={!!formErrors.eventType}>
                                    <InputLabel>Event Type</InputLabel>
                                    <Select
                                        value={eventFormData.eventType}
                                        onChange={(e) => handleEventFormChange('eventType', e.target.value)}
                                        label="Event Type"
                                    >
                                        <MenuItem value="Workshop">Workshop</MenuItem>
                                        <MenuItem value="Seminar">Seminar</MenuItem>
                                        <MenuItem value="Conference">Conference</MenuItem>
                                        <MenuItem value="Competition">Competition</MenuItem>
                                        <MenuItem value="Social">Social Event</MenuItem>
                                        <MenuItem value="Fundraiser">Fundraiser</MenuItem>
                                        <MenuItem value="Meeting">Meeting</MenuItem>
                                        <MenuItem value="Other">Other</MenuItem>
                                    </Select>
                                    {formErrors.eventType && (
                                        <Typography variant="caption" color="error" sx={{ ml: 2 }}>
                                            {formErrors.eventType}
                                        </Typography>
                                    )}
                                </FormControl>
                            </Grid>

                            <Grid item xs={12}>
                                <TextField
                                    label="Event Description"
                                    value={eventFormData.description}
                                    onChange={(e) => handleEventFormChange('description', e.target.value)}
                                    fullWidth
                                    multiline
                                    rows={3}
                                    required
                                    error={!!formErrors.description}
                                    helperText={formErrors.description || "Describe what attendees can expect"}
                                />
                            </Grid>

                            {/* Date and Time */}
                            <Grid item xs={12}>
                                <Divider sx={{ my: 2 }} />
                                <Typography variant="h6" gutterBottom color="primary">
                                    📅 Date & Time
                                </Typography>
                            </Grid>

                            <Grid item xs={12} sm={6}>
                                <TextField
                                    label="Start Date"
                                    type="date"
                                    value={eventFormData.startDate}
                                    onChange={(e) => handleEventFormChange('startDate', e.target.value)}
                                    fullWidth
                                    required
                                    error={!!formErrors.startDate}
                                    helperText={formErrors.startDate}
                                    InputLabelProps={{ shrink: true }}
                                />
                            </Grid>

                            <Grid item xs={12} sm={6}>
                                <TextField
                                    label="End Date"
                                    type="date"
                                    value={eventFormData.endDate}
                                    onChange={(e) => handleEventFormChange('endDate', e.target.value)}
                                    fullWidth
                                    error={!!formErrors.endDate}
                                    helperText={formErrors.endDate || "Leave blank if single-day event"}
                                    InputLabelProps={{ shrink: true }}
                                />
                            </Grid>

                            <Grid item xs={12} sm={6}>
                                <TextField
                                    label="Start Time"
                                    type="time"
                                    value={eventFormData.startTime}
                                    onChange={(e) => handleEventFormChange('startTime', e.target.value)}
                                    fullWidth
                                    required
                                    error={!!formErrors.startTime}
                                    helperText={formErrors.startTime}
                                    InputLabelProps={{ shrink: true }}
                                />
                            </Grid>

                            <Grid item xs={12} sm={6}>
                                <TextField
                                    label="End Time"
                                    type="time"
                                    value={eventFormData.endTime}
                                    onChange={(e) => handleEventFormChange('endTime', e.target.value)}
                                    fullWidth
                                    helperText="Approximate end time"
                                    InputLabelProps={{ shrink: true }}
                                />
                            </Grid>

                            {/* Location and Logistics */}
                            <Grid item xs={12}>
                                <Divider sx={{ my: 2 }} />
                                <Typography variant="h6" gutterBottom color="primary">
                                    📍 Location & Logistics
                                </Typography>
                            </Grid>

                            <Grid item xs={12} sm={6}>
                                <TextField
                                    label="Venue"
                                    value={eventFormData.venue}
                                    onChange={(e) => handleEventFormChange('venue', e.target.value)}
                                    fullWidth
                                    required
                                    error={!!formErrors.venue}
                                    helperText={formErrors.venue || "e.g., Main Auditorium, Room 205"}
                                />
                            </Grid>

                            <Grid item xs={12} sm={6}>
                                <FormControl fullWidth required error={!!formErrors.club}>
                                    <InputLabel>Organizing Club</InputLabel>
                                    <Select
                                        value={eventFormData.club}
                                        onChange={(e) => handleEventFormChange('club', e.target.value)}
                                        label="Organizing Club"
                                    >
                                        {myClubs.map((club) => (
                                            <MenuItem key={club._id} value={club._id}>
                                                {club.name}
                                            </MenuItem>
                                        ))}
                                    </Select>
                                    {formErrors.club && (
                                        <Typography variant="caption" color="error" sx={{ ml: 2 }}>
                                            {formErrors.club}
                                        </Typography>
                                    )}
                                </FormControl>
                            </Grid>

                            <Grid item xs={12} sm={6}>
                                <TextField
                                    label="Max Attendees"
                                    type="number"
                                    value={eventFormData.maxAttendees}
                                    onChange={(e) => handleEventFormChange('maxAttendees', e.target.value)}
                                    fullWidth
                                    inputProps={{ min: 1 }}
                                    helperText="Leave blank for unlimited capacity"
                                />
                            </Grid>

                            <Grid item xs={12} sm={6}>
                                <TextField
                                    label="Registration Fee ($)"
                                    type="number"
                                    value={eventFormData.registrationFee}
                                    onChange={(e) => handleEventFormChange('registrationFee', e.target.value)}
                                    fullWidth
                                    inputProps={{ min: 0, step: 0.01 }}
                                    helperText="Set to 0 if free event"
                                />
                            </Grid>

                            <Grid item xs={12} sm={6}>
                                <TextField
                                    label="Registration Deadline"
                                    type="date"
                                    value={eventFormData.registrationDeadline}
                                    onChange={(e) => handleEventFormChange('registrationDeadline', e.target.value)}
                                    fullWidth
                                    helperText="Leave blank if no deadline"
                                    InputLabelProps={{ shrink: true }}
                                />
                            </Grid>

                            {/* Settings */}
                            <Grid item xs={12}>
                                <Divider sx={{ my: 2 }} />
                                <Typography variant="h6" gutterBottom color="primary">
                                    ⚙️ Event Settings
                                </Typography>
                            </Grid>

                            <Grid item xs={12} sm={6}>
                                <FormControl component="fieldset">
                                    <Typography variant="subtitle1" gutterBottom>Registration Required?</Typography>
                                    <Box display="flex" gap={2}>
                                        <Button
                                            variant={eventFormData.isRegistrationRequired ? "contained" : "outlined"}
                                            onClick={() => handleEventFormChange('isRegistrationRequired', true)}
                                            startIcon={<CheckCircleIcon />}
                                            color="success"
                                        >
                                            Yes
                                        </Button>
                                        <Button
                                            variant={!eventFormData.isRegistrationRequired ? "contained" : "outlined"}
                                            onClick={() => handleEventFormChange('isRegistrationRequired', false)}
                                            startIcon={<CancelIcon />}
                                            color="error"
                                        >
                                            No
                                        </Button>
                                    </Box>
                                </FormControl>
                            </Grid>

                            <Grid item xs={12} sm={6}>
                                <FormControl component="fieldset">
                                    <Typography variant="subtitle1" gutterBottom>Public Event?</Typography>
                                    <Box display="flex" gap={2}>
                                        <Button
                                            variant={eventFormData.isPublic ? "contained" : "outlined"}
                                            onClick={() => handleEventFormChange('isPublic', true)}
                                            startIcon={<CheckCircleIcon />}
                                            color="primary"
                                        >
                                            Public
                                        </Button>
                                        <Button
                                            variant={!eventFormData.isPublic ? "contained" : "outlined"}
                                            onClick={() => handleEventFormChange('isPublic', false)}
                                            startIcon={<CancelIcon />}
                                            color="warning"
                                        >
                                            Private
                                        </Button>
                                    </Box>
                                </FormControl>
                            </Grid>

                            {/* Contact Person */}
                            <Grid item xs={12}>
                                <Divider sx={{ my: 2 }} />
                                <Typography variant="h6" gutterBottom color="primary">
                                    👤 Contact Person (Optional)
                                </Typography>
                            </Grid>

                            <Grid item xs={12} sm={4}>
                                <TextField
                                    label="Contact Name"
                                    value={eventFormData.contactPerson.name}
                                    onChange={(e) => handleEventNestedFormChange('contactPerson', 'name', e.target.value)}
                                    fullWidth
                                />
                            </Grid>

                            <Grid item xs={12} sm={4}>
                                <TextField
                                    label="Contact Email"
                                    type="email"
                                    value={eventFormData.contactPerson.email}
                                    onChange={(e) => handleEventNestedFormChange('contactPerson', 'email', e.target.value)}
                                    fullWidth
                                />
                            </Grid>

                            <Grid item xs={12} sm={4}>
                                <TextField
                                    label="Contact Phone"
                                    value={eventFormData.contactPerson.phone}
                                    onChange={(e) => handleEventNestedFormChange('contactPerson', 'phone', e.target.value)}
                                    fullWidth
                                />
                            </Grid>

                            {/* Tags */}
                            <Grid item xs={12}>
                                <Divider sx={{ my: 2 }} />
                                <Typography variant="h6" gutterBottom color="primary">
                                    🏷️ Tags
                                </Typography>
                            </Grid>

                            {eventFormData.tags.map((tag, index) => (
                                <Grid item xs={12} sm={6} key={index}>
                                    <Box display="flex" gap={1} alignItems="center">
                                        <TextField
                                            label={`Tag ${index + 1}`}
                                            value={tag}
                                            onChange={(e) => handleEventArrayChange('tags', index, e.target.value)}
                                            fullWidth
                                            placeholder="e.g., networking, tech, career"
                                        />
                                        <Button
                                            onClick={() => addEventArrayItem('tags')}
                                            variant="outlined"
                                            size="small"
                                            sx={{ minWidth: 'auto', px: 1 }}
                                        >
                                            +
                                        </Button>
                                        {eventFormData.tags.length > 1 && (
                                            <Button
                                                onClick={() => removeEventArrayItem('tags', index)}
                                                variant="outlined"
                                                color="error"
                                                size="small"
                                                sx={{ minWidth: 'auto', px: 1 }}
                                            >
                                                -
                                            </Button>
                                        )}
                                    </Box>
                                </Grid>
                            ))}
                        </Grid>
                    </DialogContent>
                    <DialogActions sx={{ p: 3, gap: 1 }}>
                        <Button onClick={handleEventFormClose} variant="outlined">
                            Cancel
                        </Button>
                        <Button
                            type="submit"
                            variant="contained"
                            disabled={submitLoading}
                            startIcon={submitLoading ? <CircularProgress size={16} /> : <SaveIcon />}
                            sx={{ minWidth: 120 }}
                        >
                            {submitLoading ? 'Saving...' : (editMode ? 'Update Event' : 'Create Event')}
                        </Button>
                    </DialogActions>
                </form>
            </Dialog>

            {/* Member Management Dialog */}
            <Dialog open={memberManagementOpen} onClose={() => setMemberManagementOpen(false)} maxWidth="md" fullWidth>
                <DialogTitle sx={{ bgcolor: 'success.main', color: 'white', display: 'flex', alignItems: 'center', gap: 2 }}>
                    <PersonIcon />
                    Manage Members - {selectedClub?.name}
                </DialogTitle>
                <DialogContent sx={{ mt: 2 }}>
                    {/* Add New Member Section */}
                    <Card sx={{ mb: 3, bgcolor: 'primary.50' }}>
                        <CardContent>
                            <Typography variant="h6" gutterBottom color="primary">
                                ➕ Add New Member
                            </Typography>
                            <Grid container spacing={2} alignItems="center">
                                <Grid item xs={12} sm={6}>
                                    <TextField
                                        label="Search by Email"
                                        type="email"
                                        value={searchEmail}
                                        onChange={(e) => setSearchEmail(e.target.value)}
                                        fullWidth
                                        placeholder="student@university.edu"
                                    />
                                </Grid>
                                <Grid item xs={12} sm={3}>
                                    <Button
                                        onClick={handleSearchUser}
                                        variant="outlined"
                                        disabled={searchLoading || !searchEmail.trim()}
                                        startIcon={searchLoading ? <CircularProgress size={16} /> : <SearchIcon />}
                                        fullWidth
                                    >
                                        {searchLoading ? 'Searching...' : 'Search'}
                                    </Button>
                                </Grid>
                                {searchUser && (
                                    <Grid item xs={12} sm={3}>
                                        <FormControl fullWidth>
                                            <InputLabel>Role</InputLabel>
                                            <Select
                                                defaultValue="Member"
                                                label="Role"
                                            >
                                                <MenuItem value="Member">Member</MenuItem>
                                                <MenuItem value="Officer">Officer</MenuItem>
                                                <MenuItem value="Vice President">Vice President</MenuItem>
                                            </Select>
                                        </FormControl>
                                    </Grid>
                                )}
                            </Grid>

                            {searchUser && (
                                <Card sx={{ mt: 2, bgcolor: 'success.50' }}>
                                    <CardContent>
                                        <Box display="flex" alignItems="center" gap={2} mb={2}>
                                            <Avatar sx={{ bgcolor: 'primary.main' }}>
                                                {searchUser.name.charAt(0).toUpperCase()}
                                            </Avatar>
                                            <Box flexGrow={1}>
                                                <Typography variant="subtitle1" fontWeight="bold">
                                                    {searchUser.name}
                                                </Typography>
                                                <Typography variant="body2" color="text.secondary">
                                                    {searchUser.email}
                                                </Typography>
                                                <Typography variant="caption" color="text.secondary">
                                                    {searchUser.major} • {searchUser.year}
                                                </Typography>
                                            </Box>
                                            <Button
                                                onClick={() => handleAddMember('Member')}
                                                variant="contained"
                                                color="success"
                                                startIcon={<AddIcon />}
                                            >
                                                Add Member
                                            </Button>
                                        </Box>
                                    </CardContent>
                                </Card>
                            )}
                        </CardContent>
                    </Card>

                    {/* Current Members List */}
                    <Typography variant="h6" gutterBottom>
                        👥 Current Members ({clubMembers.length})
                    </Typography>

                    {clubMembers.length === 0 ? (
                        <Alert severity="info">No members found. Add some members to get started!</Alert>
                    ) : (
                        <TableContainer component={Paper}>
                            <Table>
                                <TableHead>
                                    <TableRow>
                                        <TableCell><strong>Member</strong></TableCell>
                                        <TableCell><strong>Email</strong></TableCell>
                                        <TableCell><strong>Role</strong></TableCell>
                                        <TableCell><strong>Joined</strong></TableCell>
                                        <TableCell><strong>Actions</strong></TableCell>
                                    </TableRow>
                                </TableHead>
                                <TableBody>
                                    {clubMembers.map((member) => (
                                        <TableRow key={member.user._id} hover>
                                            <TableCell>
                                                <Box display="flex" alignItems="center" gap={2}>
                                                    <Avatar sx={{ bgcolor: 'primary.main' }}>
                                                        {member.user.name.charAt(0).toUpperCase()}
                                                    </Avatar>
                                                    <Box>
                                                        <Typography variant="subtitle2" fontWeight="bold">
                                                            {member.user.name}
                                                        </Typography>
                                                        <Typography variant="caption" color="text.secondary">
                                                            {member.user.major} • {member.user.year}
                                                        </Typography>
                                                    </Box>
                                                </Box>
                                            </TableCell>
                                            <TableCell>{member.user.email}</TableCell>
                                            <TableCell>
                                                <FormControl size="small" sx={{ minWidth: 120 }}>
                                                    <Select
                                                        value={member.role}
                                                        onChange={(e) => handleUpdateMemberRole(member.user._id, e.target.value)}
                                                        disabled={member.role === 'President'}
                                                    >
                                                        <MenuItem value="Member">Member</MenuItem>
                                                        <MenuItem value="Officer">Officer</MenuItem>
                                                        <MenuItem value="Vice President">Vice President</MenuItem>
                                                        <MenuItem value="President" disabled>President</MenuItem>
                                                    </Select>
                                                </FormControl>
                                            </TableCell>
                                            <TableCell>
                                                {member.joinedDate ? new Date(member.joinedDate).toLocaleDateString() : 'N/A'}
                                            </TableCell>
                                            <TableCell>
                                                {member.role !== 'President' && (
                                                    <Tooltip title="Remove Member">
                                                        <IconButton
                                                            onClick={() => handleRemoveMember(member.user._id)}
                                                            color="error"
                                                            size="small"
                                                        >
                                                            <DeleteIcon />
                                                        </IconButton>
                                                    </Tooltip>
                                                )}
                                            </TableCell>
                                        </TableRow>
                                    ))}
                                </TableBody>
                            </Table>
                        </TableContainer>
                    )}
                </DialogContent>
                <DialogActions sx={{ p: 3 }}>
                    <Button onClick={() => setMemberManagementOpen(false)} variant="contained">
                        Done
                    </Button>
                </DialogActions>
            </Dialog>

            {/* Attendee Management Dialog */}
            <Dialog open={attendeeManagementOpen} onClose={() => setAttendeeManagementOpen(false)} maxWidth="lg" fullWidth>
                <DialogTitle sx={{ bgcolor: 'warning.main', color: 'white', display: 'flex', alignItems: 'center', gap: 2 }}>
                    <EventIcon />
                    Manage Attendees - {selectedEvent?.title}
                </DialogTitle>
                <DialogContent sx={{ mt: 2 }}>
                    {/* Event Info Summary */}
                    <Card sx={{ mb: 3, bgcolor: 'info.50' }}>
                        <CardContent>
                            <Grid container spacing={2}>
                                <Grid item xs={12} sm={6}>
                                    <Typography variant="subtitle2" color="text.secondary">Event Date</Typography>
                                    <Typography variant="body1">
                                        {selectedEvent?.startDate ? new Date(selectedEvent.startDate).toLocaleDateString() : 'N/A'}
                                    </Typography>
                                </Grid>
                                <Grid item xs={12} sm={6}>
                                    <Typography variant="subtitle2" color="text.secondary">Venue</Typography>
                                    <Typography variant="body1">{selectedEvent?.venue || 'N/A'}</Typography>
                                </Grid>
                                <Grid item xs={12} sm={6}>
                                    <Typography variant="subtitle2" color="text.secondary">Total Registered</Typography>
                                    <Typography variant="body1">{selectedEvent?.attendees?.length || 0}</Typography>
                                </Grid>
                                <Grid item xs={12} sm={6}>
                                    <Typography variant="subtitle2" color="text.secondary">Max Capacity</Typography>
                                    <Typography variant="body1">{selectedEvent?.maxAttendees || 'Unlimited'}</Typography>
                                </Grid>
                            </Grid>
                        </CardContent>
                    </Card>

                    {/* Attendees List */}
                    <Typography variant="h6" gutterBottom>
                        👥 Event Attendees
                    </Typography>

                    {!selectedEvent?.attendees || selectedEvent.attendees.length === 0 ? (
                        <Alert severity="info">No attendees registered for this event yet.</Alert>
                    ) : (
                        <TableContainer component={Paper}>
                            <Table>
                                <TableHead>
                                    <TableRow>
                                        <TableCell><strong>Attendee</strong></TableCell>
                                        <TableCell><strong>Email</strong></TableCell>
                                        <TableCell><strong>Registration Date</strong></TableCell>
                                        <TableCell><strong>Attendance</strong></TableCell>
                                        <TableCell><strong>Actions</strong></TableCell>
                                    </TableRow>
                                </TableHead>
                                <TableBody>
                                    {selectedEvent.attendees.map((attendee) => {
                                        const user = typeof attendee === 'object' ? attendee.user : attendee;
                                        const attendanceInfo = typeof attendee === 'object' ? attendee : {};

                                        return (
                                            <TableRow key={user._id || user} hover>
                                                <TableCell>
                                                    <Box display="flex" alignItems="center" gap={2}>
                                                        <Avatar sx={{ bgcolor: 'primary.main' }}>
                                                            {typeof user === 'object' ? user.name?.charAt(0).toUpperCase() : '?'}
                                                        </Avatar>
                                                        <Box>
                                                            <Typography variant="subtitle2" fontWeight="bold">
                                                                {typeof user === 'object' ? user.name : 'Unknown'}
                                                            </Typography>
                                                            {typeof user === 'object' && user.major && (
                                                                <Typography variant="caption" color="text.secondary">
                                                                    {user.major} • {user.year}
                                                                </Typography>
                                                            )}
                                                        </Box>
                                                    </Box>
                                                </TableCell>
                                                <TableCell>
                                                    {typeof user === 'object' ? user.email : 'N/A'}
                                                </TableCell>
                                                <TableCell>
                                                    {attendanceInfo.registeredAt ?
                                                        new Date(attendanceInfo.registeredAt).toLocaleDateString() : 'N/A'}
                                                </TableCell>
                                                <TableCell>
                                                    <Box display="flex" gap={1}>
                                                        <Button
                                                            variant={attendanceInfo.attended ? "contained" : "outlined"}
                                                            color="success"
                                                            size="small"
                                                            onClick={() => {
                                                                // Handle mark as present
                                                                console.log('Mark present:', user._id);
                                                            }}
                                                            startIcon={<CheckCircleIcon />}
                                                        >
                                                            Present
                                                        </Button>
                                                        <Button
                                                            variant={attendanceInfo.attended === false ? "contained" : "outlined"}
                                                            color="error"
                                                            size="small"
                                                            onClick={() => {
                                                                // Handle mark as absent
                                                                console.log('Mark absent:', user._id);
                                                            }}
                                                            startIcon={<CancelIcon />}
                                                        >
                                                            Absent
                                                        </Button>
                                                    </Box>
                                                </TableCell>
                                                <TableCell>
                                                    <Tooltip title="Remove from Event">
                                                        <IconButton
                                                            onClick={() => {
                                                                if (window.confirm('Remove this attendee from the event?')) {
                                                                    console.log('Remove attendee:', user._id);
                                                                    // Handle remove attendee
                                                                }
                                                            }}
                                                            color="error"
                                                            size="small"
                                                        >
                                                            <DeleteIcon />
                                                        </IconButton>
                                                    </Tooltip>
                                                </TableCell>
                                            </TableRow>
                                        );
                                    })}
                                </TableBody>
                            </Table>
                        </TableContainer>
                    )}

                    {/* Attendance Summary */}
                    {selectedEvent?.attendees && selectedEvent.attendees.length > 0 && (
                        <Card sx={{ mt: 3, bgcolor: 'success.50' }}>
                            <CardContent>
                                <Typography variant="h6" gutterBottom color="success.main">
                                    📊 Attendance Summary
                                </Typography>
                                <Grid container spacing={2}>
                                    <Grid item xs={6} sm={3}>
                                        <Typography variant="subtitle2" color="text.secondary">Total Registered</Typography>
                                        <Typography variant="h5" color="primary">
                                            {selectedEvent.attendees.length}
                                        </Typography>
                                    </Grid>
                                    <Grid item xs={6} sm={3}>
                                        <Typography variant="subtitle2" color="text.secondary">Present</Typography>
                                        <Typography variant="h5" color="success.main">
                                            {selectedEvent.attendees.filter(a => a.attended === true).length}
                                        </Typography>
                                    </Grid>
                                    <Grid item xs={6} sm={3}>
                                        <Typography variant="subtitle2" color="text.secondary">Absent</Typography>
                                        <Typography variant="h5" color="error.main">
                                            {selectedEvent.attendees.filter(a => a.attended === false).length}
                                        </Typography>
                                    </Grid>
                                    <Grid item xs={6} sm={3}>
                                        <Typography variant="subtitle2" color="text.secondary">Not Marked</Typography>
                                        <Typography variant="h5" color="warning.main">
                                            {selectedEvent.attendees.filter(a => a.attended === undefined).length}
                                        </Typography>
                                    </Grid>
                                </Grid>
                            </CardContent>
                        </Card>
                    )}
                </DialogContent>
                <DialogActions sx={{ p: 3 }}>
                    <Button onClick={() => setAttendeeManagementOpen(false)} variant="contained">
                        Done
                    </Button>
                </DialogActions>
            </Dialog>

            {/* Priority 3 Dialog Components */}

            {/* Notification Settings Dialog */}
            <Dialog
                open={notificationSettingsOpen}
                onClose={() => setNotificationSettingsOpen(false)}
                maxWidth="sm"
                fullWidth
            >
                <DialogTitle>🔔 Notification Preferences</DialogTitle>
                <DialogContent>
                    <Box sx={{ pt: 2 }}>
                        <Typography variant="h6" gutterBottom>
                            Notification Types
                        </Typography>
                        <FormControlLabel
                            control={
                                <Switch
                                    checked={notificationPreferences.emailNotifications}
                                    onChange={(e) => setNotificationPreferences(prev => ({
                                        ...prev,
                                        emailNotifications: e.target.checked
                                    }))}
                                />
                            }
                            label="Email Notifications"
                        />
                        <FormControlLabel
                            control={
                                <Switch
                                    checked={notificationPreferences.pushNotifications}
                                    onChange={(e) => setNotificationPreferences(prev => ({
                                        ...prev,
                                        pushNotifications: e.target.checked
                                    }))}
                                />
                            }
                            label="Push Notifications"
                        />

                        <Typography variant="h6" gutterBottom sx={{ mt: 3 }}>
                            Event Types
                        </Typography>
                        <FormControlLabel
                            control={
                                <Switch
                                    checked={notificationPreferences.memberJoined}
                                    onChange={(e) => setNotificationPreferences(prev => ({
                                        ...prev,
                                        memberJoined: e.target.checked
                                    }))}
                                />
                            }
                            label="New Member Joined"
                        />
                        <FormControlLabel
                            control={
                                <Switch
                                    checked={notificationPreferences.eventCreated}
                                    onChange={(e) => setNotificationPreferences(prev => ({
                                        ...prev,
                                        eventCreated: e.target.checked
                                    }))}
                                />
                            }
                            label="Event Created"
                        />
                        <FormControlLabel
                            control={
                                <Switch
                                    checked={notificationPreferences.eventRegistration}
                                    onChange={(e) => setNotificationPreferences(prev => ({
                                        ...prev,
                                        eventRegistration: e.target.checked
                                    }))}
                                />
                            }
                            label="Event Registrations"
                        />
                        <FormControlLabel
                            control={
                                <Switch
                                    checked={notificationPreferences.achievements}
                                    onChange={(e) => setNotificationPreferences(prev => ({
                                        ...prev,
                                        achievements: e.target.checked
                                    }))}
                                />
                            }
                            label="Achievement Unlocked"
                        />
                    </Box>
                </DialogContent>
                <DialogActions>
                    <Button onClick={() => setNotificationSettingsOpen(false)}>
                        Cancel
                    </Button>
                    <Button variant="contained" onClick={() => setNotificationSettingsOpen(false)}>
                        Save Preferences
                    </Button>
                </DialogActions>
            </Dialog>

            {/* Achievement System Dialog */}
            <Dialog
                open={achievementSystemOpen}
                onClose={() => setAchievementSystemOpen(false)}
                maxWidth="md"
                fullWidth
            >
                <DialogTitle>🏆 Award Achievement Badge</DialogTitle>
                <DialogContent>
                    <Box sx={{ pt: 2 }}>
                        <Grid container spacing={3}>
                            <Grid item xs={12} md={6}>
                                <FormControl fullWidth>
                                    <InputLabel>Select Member</InputLabel>
                                    <Select value="" label="Select Member">
                                        <MenuItem value="sarah">Sarah Johnson</MenuItem>
                                        <MenuItem value="mike">Mike Chen</MenuItem>
                                        <MenuItem value="emma">Emma Wilson</MenuItem>
                                    </Select>
                                </FormControl>
                            </Grid>
                            <Grid item xs={12} md={6}>
                                <FormControl fullWidth>
                                    <InputLabel>Select Badge</InputLabel>
                                    <Select value="" label="Select Badge">
                                        <MenuItem value="champion">Event Champion</MenuItem>
                                        <MenuItem value="social">Social Butterfly</MenuItem>
                                        <MenuItem value="volunteer">Volunteer Hero</MenuItem>
                                        <MenuItem value="growth">Growth Master</MenuItem>
                                    </Select>
                                </FormControl>
                            </Grid>
                            <Grid item xs={12}>
                                <TextField
                                    fullWidth
                                    multiline
                                    rows={3}
                                    label="Achievement Note"
                                    placeholder="Add a personal note about this achievement..."
                                />
                            </Grid>
                        </Grid>
                    </Box>
                </DialogContent>
                <DialogActions>
                    <Button onClick={() => setAchievementSystemOpen(false)}>
                        Cancel
                    </Button>
                    <Button variant="contained" onClick={() => setAchievementSystemOpen(false)}>
                        Award Badge
                    </Button>
                </DialogActions>
            </Dialog>

            {/* Event Templates Dialog */}
            <Dialog
                open={eventTemplatesOpen}
                onClose={() => setEventTemplatesOpen(false)}
                maxWidth="md"
                fullWidth
            >
                <DialogTitle>📋 Create Event Template</DialogTitle>
                <DialogContent>
                    <Box sx={{ pt: 2 }}>
                        <Grid container spacing={3}>
                            <Grid item xs={12} md={6}>
                                <TextField
                                    fullWidth
                                    label="Template Name"
                                    placeholder="e.g. Workshop Template"
                                />
                            </Grid>
                            <Grid item xs={12} md={6}>
                                <FormControl fullWidth>
                                    <InputLabel>Template Category</InputLabel>
                                    <Select value="" label="Template Category">
                                        <MenuItem value="workshop">Workshop</MenuItem>
                                        <MenuItem value="social">Social Event</MenuItem>
                                        <MenuItem value="competition">Competition</MenuItem>
                                        <MenuItem value="meeting">Meeting</MenuItem>
                                    </Select>
                                </FormControl>
                            </Grid>
                            <Grid item xs={12}>
                                <TextField
                                    fullWidth
                                    multiline
                                    rows={3}
                                    label="Template Description"
                                    placeholder="Describe this template..."
                                />
                            </Grid>
                            <Grid item xs={12} md={6}>
                                <TextField
                                    fullWidth
                                    label="Default Duration (hours)"
                                    type="number"
                                    defaultValue={2}
                                />
                            </Grid>
                            <Grid item xs={12} md={6}>
                                <TextField
                                    fullWidth
                                    label="Default Max Attendees"
                                    type="number"
                                    defaultValue={50}
                                />
                            </Grid>
                        </Grid>
                    </Box>
                </DialogContent>
                <DialogActions>
                    <Button onClick={() => setEventTemplatesOpen(false)}>
                        Cancel
                    </Button>
                    <Button variant="contained" onClick={() => setEventTemplatesOpen(false)}>
                        Save Template
                    </Button>
                </DialogActions>
            </Dialog>

            {/* Bulk Event Creation Dialog */}
            <Dialog
                open={bulkEventCreationOpen}
                onClose={() => setBulkEventCreationOpen(false)}
                maxWidth="lg"
                fullWidth
            >
                <DialogTitle>🎯 Bulk Event Creation</DialogTitle>
                <DialogContent>
                    <Box sx={{ pt: 2 }}>
                        <Alert severity="info" sx={{ mb: 3 }}>
                            Create multiple events at once using templates or custom settings.
                        </Alert>
                        <Grid container spacing={3}>
                            <Grid item xs={12} md={4}>
                                <FormControl fullWidth>
                                    <InputLabel>Base Template</InputLabel>
                                    <Select value="" label="Base Template">
                                        <MenuItem value="workshop">Workshop Template</MenuItem>
                                        <MenuItem value="social">Social Event Template</MenuItem>
                                        <MenuItem value="meeting">Meeting Template</MenuItem>
                                    </Select>
                                </FormControl>
                            </Grid>
                            <Grid item xs={12} md={4}>
                                <TextField
                                    fullWidth
                                    label="Number of Events"
                                    type="number"
                                    defaultValue={1}
                                />
                            </Grid>
                            <Grid item xs={12} md={4}>
                                <FormControl fullWidth>
                                    <InputLabel>Frequency</InputLabel>
                                    <Select value="" label="Frequency">
                                        <MenuItem value="weekly">Weekly</MenuItem>
                                        <MenuItem value="biweekly">Bi-weekly</MenuItem>
                                        <MenuItem value="monthly">Monthly</MenuItem>
                                        <MenuItem value="custom">Custom</MenuItem>
                                    </Select>
                                </FormControl>
                            </Grid>
                            <Grid item xs={12}>
                                <Typography variant="h6" gutterBottom>
                                    📅 Event Schedule Preview
                                </Typography>
                                <TableContainer component={Paper} variant="outlined">
                                    <Table>
                                        <TableHead>
                                            <TableRow>
                                                <TableCell>Event Name</TableCell>
                                                <TableCell>Date</TableCell>
                                                <TableCell>Time</TableCell>
                                                <TableCell>Template</TableCell>
                                            </TableRow>
                                        </TableHead>
                                        <TableBody>
                                            <TableRow>
                                                <TableCell>Weekly Workshop #1</TableCell>
                                                <TableCell>Dec 20, 2024</TableCell>
                                                <TableCell>2:00 PM - 4:00 PM</TableCell>
                                                <TableCell>Workshop Template</TableCell>
                                            </TableRow>
                                            <TableRow>
                                                <TableCell>Weekly Workshop #2</TableCell>
                                                <TableCell>Dec 27, 2024</TableCell>
                                                <TableCell>2:00 PM - 4:00 PM</TableCell>
                                                <TableCell>Workshop Template</TableCell>
                                            </TableRow>
                                        </TableBody>
                                    </Table>
                                </TableContainer>
                            </Grid>
                        </Grid>
                    </Box>
                </DialogContent>
                <DialogActions>
                    <Button onClick={() => setBulkEventCreationOpen(false)}>
                        Cancel
                    </Button>
                    <Button variant="outlined" sx={{ mr: 1 }}>
                        Preview Events
                    </Button>
                    <Button variant="contained" onClick={() => setBulkEventCreationOpen(false)}>
                        Create All Events
                    </Button>
                </DialogActions>
            </Dialog>

            {/* Communication Hub Dialog */}
            <Dialog
                open={communicationHubOpen}
                onClose={() => setCommunicationHubOpen(false)}
                maxWidth="md"
                fullWidth
            >
                <DialogTitle>📢 Create Announcement</DialogTitle>
                <DialogContent>
                    <Box sx={{ pt: 2 }}>
                        <Grid container spacing={3}>
                            <Grid item xs={12} md={8}>
                                <TextField
                                    fullWidth
                                    label="Announcement Title"
                                    placeholder="e.g. Upcoming Workshop Reminder"
                                />
                            </Grid>
                            <Grid item xs={12} md={4}>
                                <FormControl fullWidth>
                                    <InputLabel>Priority</InputLabel>
                                    <Select value="" label="Priority">
                                        <MenuItem value="low">Low</MenuItem>
                                        <MenuItem value="normal">Normal</MenuItem>
                                        <MenuItem value="high">High</MenuItem>
                                        <MenuItem value="urgent">Urgent</MenuItem>
                                    </Select>
                                </FormControl>
                            </Grid>
                            <Grid item xs={12}>
                                <TextField
                                    fullWidth
                                    multiline
                                    rows={5}
                                    label="Announcement Content"
                                    placeholder="Write your announcement here..."
                                />
                            </Grid>
                            <Grid item xs={12} md={6}>
                                <FormControl fullWidth>
                                    <InputLabel>Target Audience</InputLabel>
                                    <Select value="" label="Target Audience">
                                        <MenuItem value="all">All Members</MenuItem>
                                        <MenuItem value="officers">Officers Only</MenuItem>
                                        <MenuItem value="active">Active Members</MenuItem>
                                        <MenuItem value="new">New Members</MenuItem>
                                    </Select>
                                </FormControl>
                            </Grid>
                            <Grid item xs={12} md={6}>
                                <FormControl fullWidth>
                                    <InputLabel>Delivery Method</InputLabel>
                                    <Select value="" label="Delivery Method">
                                        <MenuItem value="platform">Platform Only</MenuItem>
                                        <MenuItem value="email">Email + Platform</MenuItem>
                                        <MenuItem value="all">All Channels</MenuItem>
                                    </Select>
                                </FormControl>
                            </Grid>
                            <Grid item xs={12}>
                                <FormControlLabel
                                    control={<Switch />}
                                    label="Schedule for later delivery"
                                />
                            </Grid>
                        </Grid>
                    </Box>
                </DialogContent>
                <DialogActions>
                    <Button onClick={() => setCommunicationHubOpen(false)}>
                        Cancel
                    </Button>
                    <Button variant="outlined" sx={{ mr: 1 }}>
                        Save Draft
                    </Button>
                    <Button variant="contained" onClick={() => setCommunicationHubOpen(false)}>
                        Send Announcement
                    </Button>
                </DialogActions>
            </Dialog>

            {/* Role Management Dialog */}
            <Dialog
                open={roleManagementOpen}
                onClose={() => setRoleManagementOpen(false)}
                maxWidth="md"
                fullWidth
            >
                <DialogTitle>🎭 Create Custom Role</DialogTitle>
                <DialogContent>
                    <Box sx={{ pt: 2 }}>
                        <Grid container spacing={3}>
                            <Grid item xs={12} md={6}>
                                <TextField
                                    fullWidth
                                    label="Role Name"
                                    placeholder="e.g. Marketing Coordinator"
                                />
                            </Grid>
                            <Grid item xs={12} md={6}>
                                <FormControl fullWidth>
                                    <InputLabel>Role Level</InputLabel>
                                    <Select value="" label="Role Level">
                                        <MenuItem value="member">Member Level</MenuItem>
                                        <MenuItem value="officer">Officer Level</MenuItem>
                                        <MenuItem value="executive">Executive Level</MenuItem>
                                    </Select>
                                </FormControl>
                            </Grid>
                            <Grid item xs={12}>
                                <TextField
                                    fullWidth
                                    multiline
                                    rows={3}
                                    label="Role Description"
                                    placeholder="Describe the responsibilities of this role..."
                                />
                            </Grid>
                            <Grid item xs={12}>
                                <Typography variant="h6" gutterBottom>
                                    🔐 Permissions
                                </Typography>
                                <Grid container spacing={2}>
                                    <Grid item xs={12} md={6}>
                                        <FormControlLabel
                                            control={<Switch />}
                                            label="Create Events"
                                        />
                                        <FormControlLabel
                                            control={<Switch />}
                                            label="Manage Members"
                                        />
                                        <FormControlLabel
                                            control={<Switch />}
                                            label="Send Announcements"
                                        />
                                        <FormControlLabel
                                            control={<Switch />}
                                            label="Access Analytics"
                                        />
                                    </Grid>
                                    <Grid item xs={12} md={6}>
                                        <FormControlLabel
                                            control={<Switch />}
                                            label="Award Badges"
                                        />
                                        <FormControlLabel
                                            control={<Switch />}
                                            label="Financial Access"
                                        />
                                        <FormControlLabel
                                            control={<Switch />}
                                            label="Role Management"
                                        />
                                        <FormControlLabel
                                            control={<Switch />}
                                            label="System Settings"
                                        />
                                    </Grid>
                                </Grid>
                            </Grid>
                        </Grid>
                    </Box>
                </DialogContent>
                <DialogActions>
                    <Button onClick={() => setRoleManagementOpen(false)}>
                        Cancel
                    </Button>
                    <Button variant="contained" onClick={() => setRoleManagementOpen(false)}>
                        Create Role
                    </Button>
                </DialogActions>
            </Dialog>
        </Container>
    );
};

export default ClubAdminDashboard;
